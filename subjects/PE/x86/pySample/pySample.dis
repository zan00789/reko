PyObject * fn10001000(PyObject * ptrArg04, PyObject * ptrArg08)
// stackDelta: 4; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0008:[0..31]
// LiveOut: eax
// Trashed: eax
// Preserved:
fn10001000_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l10001000:
	word32 eax_17 = PyArg_ParseTuple(ptrArg08, 0x10002144, fp - 0x00000004, fp - 0x00000008)
	branch eax_17 != 0x00000000 l10001027
// DataOut:
// DataOut (flags):
// SymbolicIn:

l10001027:
	return Py_BuildValue(0x1000214C, dwLoc04 + dwLoc08)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l10001023:
	return eax_17
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn10001000_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



PyObject * fn10001050(PyObject * ptrArg04, PyObject * ptrArg08)
// stackDelta: 4; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0008:[0..31]
// LiveOut: eax
// Trashed: eax
// Preserved:
fn10001050_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l10001050:
	word32 eax_17 = PyArg_ParseTuple(ptrArg08, 0x10002150, fp - 0x00000008, fp - 0x00000004)
	branch eax_17 != 0x00000000 l10001078
// DataOut:
// DataOut (flags):
// SymbolicIn:

l10001078:
	return Py_BuildValue(0x1000214C, dwLoc08 - dwLoc04)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l10001074:
	return eax_17
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn10001050_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



PyObject * fn100010A0(PyObject * ptrArg04, PyObject * ptrArg08)
// stackDelta: 4; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0008:[0..31]
// LiveOut: eax
// Trashed: eax
// Preserved:
fn100010A0_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l100010A0:
	word32 eax_17 = PyArg_ParseTuple(ptrArg08, 0x10002158, fp - 0x00000008, fp - 0x00000004)
	branch eax_17 != 0x00000000 l100010C8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l100010C8:
	return Py_BuildValue(0x1000214C, (int32) ((int64) dwLoc08 / dwLoc04))
// DataOut:
// DataOut (flags):
// SymbolicIn:

l100010C4:
	return eax_17
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn100010A0_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



PyObject * fn100010F0(PyObject * ptrArg04, PyObject * ptrArg08)
// stackDelta: 4; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0008:[0..31]
// LiveOut: eax
// Trashed: eax
// Preserved:
fn100010F0_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l100010F0:
	word32 eax_17 = PyArg_ParseTuple(ptrArg08, 0x10002160, fp - 0x00000008, fp - 0x00000004)
	branch eax_17 != 0x00000000 l10001118
// DataOut:
// DataOut (flags):
// SymbolicIn:

l10001118:
	return Py_BuildValue(0x10002168, (real64) rLoc08 / rLoc04)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l10001114:
	return eax_17
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn100010F0_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



PyObject * py_unused(PyObject * self, PyObject * args)
// stackDelta: 4; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0008:[0..31]
// LiveOut: eax
// Trashed: eax
// Preserved:
py_unused_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l10001140:
	word32 eax_10 = PyArg_ParseTuple(args, 0x1000216C)
	branch eax_10 != 0x00000000 l10001158
// DataOut:
// DataOut (flags):
// SymbolicIn:

l10001158:
	word32 eax_16 = &_Py_NoneStruct
	Mem18[eax_16:word32] = Mem9[eax_16:word32] + 0x00000001
	return &_Py_NoneStruct
// DataOut:
// DataOut (flags):
// SymbolicIn:

l10001157:
	return eax_10
// DataOut:
// DataOut (flags):
// SymbolicIn:

py_unused_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void initpySample()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO eax Top
// Preserved: esp
initpySample_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l10001170:
	Py_InitModule4(0x10002174, 0x10003010, 0x00000000, 0x00000000, 0x000003EF)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

initpySample_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn100011E9(word32 edx, word32 ebx, word32 ebp, word32 esi, word32 edi, word32 dwArg08, ptr32 & ecxOut, ptr32 & edxOut, ptr32 & ebxOut, ptr32 & esiOut, ptr32 & ediOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ebp:[0..31] ebx:[0..31] edi:[0..31] edx:[0..31] esi:[0..31] fs:[0..15] Stack +0008:[0..31]
// LiveOut: eax ebx ecx edi edx esi Top
// Trashed: SCZO eax ebx ecx edi edx esi Top
// Preserved: ebp esp
fn100011E9_entry:
	int8 Top_101 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l100011E9:
	word32 eax_14
	word32 ebp_147 = 0x00000000
	branch dwArg08 != 0x00000000 l10001202
// DataOut:
// DataOut (flags):
// SymbolicIn:

l100011F4:
	branch Mem8[0x10003070:word32] <= 0x00000000 l10001233
// DataOut:
// DataOut (flags):
// SymbolicIn:

l10001233:
	eax_14 = 0x00000000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l100011FC:
	Mem18[0x10003070:word32] = Mem8[0x10003070:word32] - 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l10001202:
	ecx = Mem23[adjust_fdiv:word32]
	Mem38[0x100033A4:word32] = ecx
	word32 esp_120 = fp - 16
	branch dwArg08 != 0x00000001 l100012E8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l100012E8:
	branch dwArg08 != 0x00000000 l1000137E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l100012F0:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l10001308:
	branch InterlockedCompareExchange(0x100033AC, 0x00000001, 0x00000000) != 0x00000000 l100012FD
// DataOut:
// DataOut (flags):
// SymbolicIn:

l100012FD:
	Sleep(0x000003E8)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l10001312:
	branch Mem53[0x100033A8:word32] == 0x00000002 l10001326
// DataOut:
// DataOut (flags):
// SymbolicIn:

l10001326:
	word32 v15_65 = Mem53[0x100033B4:word32]
	word32 eax_69 = _decode_pointer(v15_65)
	ecx = v15_65
	word32 esp_107 = fp - 16
	branch eax_69 == 0x00000000 l1000136F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1000133B:
	word32 v16_76 = Mem67[0x100033B0:word32]
	word32 ecx_80 = v16_76
	word32 esp_81 = fp - 16
	word32 edi_82 = _decode_pointer(v16_76)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l10001350:
	edi_82 = edi_82 - 0x00000004
	branch edi_82 >=u eax_69 l10001348
// DataOut:
// DataOut (flags):
// SymbolicIn:

l10001348:
	word32 eax_89 = Mem78[edi_82:word32]
	branch eax_89 == 0x00000000 l10001350
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1000134E:
	call eax_89 (retsize: 4;)
		uses: eax:eax_89,ecx:ecx_97,edx:edx_288,esp:esp_93,Stack +0000:ebp,Stack +000C:dwArg08,Stack +FFFFFFE8:0x100033AC,Stack +FFFFFFEC:0x00000001,Stack +FFFFFFF0:v16_76,Stack +FFFFFFF4:edi,Stack +FFFFFFF8:esi,Stack +FFFFFFFC:ebx,Top:Top_101
		defs: ecx:ecx_98,edx:edx_289,esp:esp_94,Top:Top_102
// DataOut:
// DataOut (flags):
// SymbolicIn:

l10001357:
	word32 esp_104 = esp_81 - 4
	Mem105[esp_104:word32] = eax_69
	free(Mem105[esp_104:(ptr32 void)])
	ecx = Mem105[esp_104:word32]
	word32 eax_108 = _encoded_null()
	Mem109[0x100033B0:word32] = eax_108
	Mem110[0x100033B4:word32] = eax_108
	esp_107 = esp_104 + 4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1000136F:
	word32 esp_112 = esp_107 - 4
	Mem113[esp_112:word32] = 0x00000000
	Mem116[esp_112 - 4:word32] = 0x100033AC
	Mem118[0x100033A8:word32] = 0x00000000
	InterlockedExchange(Mem118[esp_112 - 4:(ptr32 LONG)], Mem118[esp_112:LONG])
	esp_120 = esp_112 + 0x00000004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1000131C:
	_amsg_exit(0x0000001F)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1000121C:
	word32 edi_126 = Mem38[Mem38[fs:0x00000018:word32] + 0x00000004:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1000124B:
	word32 eax_138 = InterlockedCompareExchange(0x100033AC, edi_126, 0x00000000)
	branch eax_138 != 0x00000000 l1000123A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1000123A:
	branch eax_138 == edi_126 l10001255
// DataOut:
// DataOut (flags):
// SymbolicIn:

l10001255:
	ebp_147 = 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1000123E:
	Sleep(0x000003E8)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l10001253:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l10001258:
	branch Mem137[0x100033A8:word32] == 0x00000000 l1000126D
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1000126D:
	Mem168[0x100033A8:word32] = 0x00000001
	ecx = 0x100020A8
	esp_120 = fp - 16
	branch _initterm_e(0x100020A0, 0x100020A8) == 0x00000000 l10001293
// DataOut:
// DataOut (flags):
// SymbolicIn:

l10001293:
	_initterm(0x10002098, 0x1000209C)
	Mem183[0x100033A8:word32] = 0x00000002
	word32 dwLoc18_309 = 0x10002098
	ecx = 0x1000209C
	branch ebp_147 != 0x00000000 l100012B6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l100012AE:
	InterlockedExchange(0x100033AC, ebp_147)
	dwLoc18_309 = 0x100033AC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l100012B6:
	esp_120 = fp - 16
	branch Mem198[0x100033B8:word32] == 0x00000000 l100012DD
// DataOut:
// DataOut (flags):
// SymbolicIn:

l100012BF:
	word32 edi_216
	word32 eax_212 = fn10001742(InterlockedCompareExchange, 0x100033AC, 0x00000002, out edx, out edi_216)
	word32 esp_219 = <invalid>
	ecx = Mem203[esp_219:word32]
	esp_120 = esp_219 + 4
	branch eax_212 == 0x00000000 l100012DD
// DataOut:
// DataOut (flags):
// SymbolicIn:

l100012CE:
	Mem231[esp_219:word32] = Mem203[esp_219 + 0x00000020:word32]
	Mem233[esp_219 - 4:word32] = edi_216
	Mem236[esp_219 - 8:word32] = Mem233[esp_219 + 0x00000018:word32]
	call Mem236[0x100033B8:word32] (retsize: 4;)
		uses: eax:eax_212,ecx:ecx_226,edx:edx_217,esp:esp_219 - 8,Stack +0000:ebp,Stack +000C:dwArg08,Stack +FFFFFFE8:0x100033AC,Stack +FFFFFFEC:dwLoc18_330,Stack +FFFFFFF0:0x100033B8,Stack +FFFFFFF4:edi,Stack +FFFFFFF8:esi,Stack +FFFFFFFC:ebx,Top:0
		defs: ecx:ecx_239,edx:edx_245,esp:esp_237
// DataOut:
// DataOut (flags):
// SymbolicIn:

l100012DD:
	Mem249[0x10003070:word32] = Mem247[0x10003070:word32] + 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1000137E:
	eax_14 = 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1000128C:
	eax_14 = 0x00000000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l10001381:
	word32 esp_264 = esp_120 + 4
	edi = Mem261[esp_120:word32]
	esi = Mem261[esp_264:word32]
	ebx = Mem261[esp_264 + 4:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l10001384:
	ecxOut = ecx
	edxOut = edx
	ebxOut = ebx
	esiOut = esi
	ediOut = edi
	return eax_14
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn100011E9_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l10001264:
	_amsg_exit(0x0000001F)
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn10001388(word32 ecx, word32 edx, word32 ebx, word32 esi, word32 edi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ebx:[0..31] ecx:[0..31] edi:[0..31] edx:[0..31] esi:[0..31] fs:[0..15]
// LiveOut: eax
// Trashed: SCZO eax ebp ebx ecx edi edx esi esp Top
// Preserved:
fn10001388_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l10001388:
	word32 ebp_13 = fn100017E8(ebx, esi, edi, dwLoc0C, 0x00000010)
	word32 ebx_116 = Mem7[ebp_13 + 0x00000008:word32]
	Mem26[ebp_13 - 0x0000001C:word32] = 0x00000001
	Mem28[ebp_13 - 0x00000004:word32] = 0x00000000
	Mem29[0x10003008:word32] = edx
	Mem30[ebp_13 - 0x00000004:word32] = 0x00000001
	word32 esp_103 = <invalid>
	word32 edi_110 = ecx
	word32 esi_113 = edx
	branch edx != 0x00000000 l100013C3
// DataOut:
// DataOut (flags):
// SymbolicIn:

l100013B3:
	branch Mem30[0x10003070:word32] != 0x00000000 l100013C3
// DataOut:
// DataOut (flags):
// SymbolicIn:

l100013C3:
	branch edx == 0x00000001 l100013CC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l100013C7:
	branch edx != 0x00000002 l100013FA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l100013CC:
	word32 edx_65
	word32 eax_43 = Mem30[0x100020CC:word32]
	edx_65 = edx
	branch eax_43 == 0x00000000 l100013DD
// DataOut:
// DataOut (flags):
// SymbolicIn:

l100013D5:
	Mem53[esp_103 - 4:word32] = ecx
	Mem56[esp_103 - 8:word32] = edx
	Mem60[esp_103 - 12:word32] = ebx_116
	word32 eax_68
	call fn00000000 (retsize: 4;)
		uses: eax:eax_43,ebp:ebp_13,ebx:ebx_23,ecx:0x00000000,edi:ecx,edx:edx,esi:edx,esp:esp_14 - 12,fs:fs,Stack +0000:0x00000010,Stack +FFFFFFF8:dwLoc0C,Stack +FFFFFFFC:0x100021E8,Top:0
		defs: eax:eax_68,edx:edx_65,esp:esp_61
	Mem75[ebp_13 - 0x0000001C:word32] = eax_68
// DataOut:
// DataOut (flags):
// SymbolicIn:

l100013DD:
	branch Mem77[ebp_13 - 0x0000001C:word32] == 0x00000000 l1000147A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l100013E7:
	word32 esp_81 = esp_103 - 4
	Mem83[esp_81:word32] = ecx
	Mem86[esp_81 - 4:word32] = edx
	Mem89[esp_81 - 8:word32] = ebx_116
	word32 eax_92 = fn100011E9(edx_65, ebx_116, ebp_13, edx, ecx, Mem89[esp_81 - 4:word32], out ecx_302, out edx, out ebx_116, out esi_113, out edi_110)
	Mem104[ebp_13 - 0x0000001C:word32] = eax_92
	esp_103 = esp_81 + 0x00000004
	branch eax_92 == 0x00000000 l1000147A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l100013FA:
	word32 esp_109 = esp_103 - 4
	Mem111[esp_109:word32] = edi_110
	Mem114[esp_109 - 4:word32] = esi_113
	Mem117[esp_109 - 8:word32] = ebx_116
	word32 eax_118 = fn100017C6(Mem117[esp_109 - 8:word32], Mem117[esp_109 - 4:word32])
	Mem125[ebp_13 - 0x0000001C:word32] = eax_118
	esp_103 = esp_109 + 0x00000004
	branch esi_113 != 0x00000001 l1000142E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1000140A:
	branch eax_118 != 0x00000000 l1000142E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1000140E:
	Mem132[esp_109:word32] = edi_110
	Mem134[esp_109 - 4:word32] = eax_118
	Mem136[esp_109 - 8:word32] = ebx_116
	fn100017C6(Mem136[esp_109 - 8:word32], Mem136[esp_109 - 4:word32])
	Mem144[esp_109:word32] = edi_110
	Mem146[esp_109 - 4:word32] = 0x00000000
	Mem148[esp_109 - 8:word32] = ebx_116
	word32 ecx_153
	fn100011E9(edx, ebx_116, ebp_13, esi_113, edi_110, Mem148[esp_109 - 4:word32], out ecx_153, out edx, out ebx_116, out esi_113, out edi_110)
	int8 Top_155 = <invalid>
	esp_103 = esp_109 + 0x00000004
	word32 eax_163 = Mem148[0x100020CC:word32]
	branch eax_163 == 0x00000000 l1000142E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l10001428:
	Mem168[esp_109:word32] = edi_110
	Mem170[esp_109 - 4:word32] = 0x00000000
	Mem172[esp_109 - 8:word32] = ebx_116
	call fn00000000 (retsize: 4;)
		uses: eax:eax_163,ebp:ebp_13,ebx:ebx_152,ecx:ecx_153,edi:edi_156,edx:edx_157,esi:esi_154,esp:esp_109 - 8,fs:fs,Stack +0000:0x00000010,Stack +FFFFFFF8:dwLoc0C,Stack +FFFFFFFC:0x100021E8,Top:Top_155
		defs: edx:edx_175,esp:esp_173
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1000142E:
	branch esi_113 == 0x00000000 l10001437
// DataOut:
// DataOut (flags):
// SymbolicIn:

l10001432:
	branch esi_113 != 0x00000003 l1000147A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l10001437:
	word32 esp_187 = esp_103 - 4
	Mem190[esp_187:word32] = edi_110
	Mem193[esp_187 - 4:word32] = esi_113
	Mem197[esp_187 - 8:word32] = ebx_116
	word32 ebx_205
	word32 ecx_206
	word32 esi_207
	word32 edi_209
	word32 edx_210
	word32 eax_204 = fn100011E9(edx, ebx_116, ebp_13, esi_113, edi_110, Mem197[esp_187 - 4:word32], out ecx_206, out edx_210, out ebx_205, out esi_207, out edi_209)
	int8 Top_208 = <invalid>
	esp_103 = esp_187 + 0x00000004
	branch eax_204 != 0x00000000 l10001446
// DataOut:
// DataOut (flags):
// SymbolicIn:

l10001443:
	Mem220[ebp_13 - 0x0000001C:word32] = Mem197[ebp_13 - 0x0000001C:word32] & eax_204
// DataOut:
// DataOut (flags):
// SymbolicIn:

l10001446:
	branch Mem224[ebp_13 - 0x0000001C:word32] == 0x00000000 l1000147A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1000144C:
	word32 eax_227 = Mem224[0x100020CC:word32]
	branch eax_227 == 0x00000000 l1000147A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l10001455:
	Mem234[esp_187:word32] = edi_209
	Mem237[esp_187 - 4:word32] = esi_207
	Mem240[esp_187 - 8:word32] = ebx_205
	word32 eax_246
	call fn00000000 (retsize: 4;)
		uses: eax:eax_227,ebp:ebp_13,ebx:ebx_205,ecx:ecx_206,edi:edi_209,edx:edx_210,esi:esi_207,esp:esp_187 - 8,fs:fs,Stack +0000:0x00000010,Stack +FFFFFFF8:dwLoc0C,Stack +FFFFFFFC:0x100021E8,Top:Top_208
		defs: eax:eax_246,esp:esp_241
	Mem251[ebp_13 - 0x0000001C:word32] = eax_246
// DataOut:
// DataOut (flags):
// SymbolicIn:

l100013BB:
	Mem252[ebp_13 - 0x0000001C:word32] = 0x00000000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1000147A:
	Mem257[ebp_13 - 0x00000004:word32] = Mem254[ebp_13 - 0x00000004:word32] & 0x00000000
	Mem260[ebp_13 - 0x00000004:word32] = 0xFFFFFFFE
	fn10001493()
	word32 eax_261 = Mem260[ebp_13 - 0x0000001C:word32]
	fn1000182D(ebp_13, Mem260[esp_103 + -4:word32])
	return eax_261
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn10001388_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn10001493()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: Top
// Preserved: esp
fn10001493_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l10001493:
	Mem4[0x10003008:word32] = 0xFFFFFFFF
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn10001493_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



BOOL DllMain(HANDLE hModule, DWORD dwReason, LPVOID lpReserved)
// stackDelta: 16; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ebx:[0..31] edi:[0..31] esi:[0..31] fs:[0..15] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: eax
// Trashed: eax
// Preserved:
DllMain_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1000149E:
	branch dwReason != 0x00000001 l100014AA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l100014A5:
	fn10001864()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l100014AA:
	return fn10001388(lpReserved, dwReason, ebx, esi, edi)
// DataOut:
// DataOut (flags):
// SymbolicIn:

DllMain_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn100015CF(word32 ebx, word32 esi, word32 edi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ebx:[0..31] edi:[0..31] esi:[0..31] fs:[0..15]
// LiveOut: eax
// Trashed: SCZO eax ebp ebx ecx edi esi esp Top
// Preserved:
fn100015CF_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l100015CF:
	word32 eax_110
	word32 esp_81
	word32 ebp_13 = fn100017E8(ebx, esi, edi, dwLoc0C, 0x00000014)
	word32 esp_14 = <invalid>
	Mem21[esp_14 - 4:word32] = Mem7[0x100033B4:word32]
	word32 eax_23 = _decode_pointer(Mem21[esp_14 - 4:(ptr32 void)])
	word32 ecx_24 = Mem21[esp_14 - 4:word32]
	Mem26[ebp_13 - 0x0000001C:word32] = eax_23
	branch eax_23 != 0xFFFFFFFF l100015FE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l100015FE:
	Mem30[esp_14 - 4:word32] = 0x00000008
	word32 esp_31
	int8 Top_34
	call lock (retsize: 4;)
		uses: eax:eax_23,ebp:ebp_13,ebx:ebx,ecx:ecx_24,edi:edi,esi:_decode_pointer,esp:esp_14 - 4,fs:fs,Stack +0000:0x00000014,Stack +FFFFFFF8:dwLoc0C,Stack +FFFFFFFC:0x10002210,Top:0
		defs: esp:esp_31,Top:Top_34
	word32 ecx_36 = Mem30[esp_31:word32]
	Mem39[ebp_13 - 0x00000004:word32] = Mem30[ebp_13 - 0x00000004:word32] & 0x00000000
	Mem44[esp_31:word32] = Mem39[0x100033B4:word32]
	Mem46[ebp_13 - 0x0000001C:word32] = _decode_pointer(Mem44[esp_31:(ptr32 void)])
	Mem49[esp_31 - 4:word32] = Mem46[0x100033B0:word32]
	Mem51[ebp_13 - 0x00000020:word32] = _decode_pointer(Mem49[esp_31 - 4:(ptr32 void)])
	Mem54[esp_31 - 8:word32] = ebp_13 - 0x00000020
	Mem57[esp_31 - 12:word32] = ebp_13 - 0x0000001C
	Mem60[esp_31 - 16:word32] = Mem57[ebp_13 + 0x00000008:word32]
	word32 eax_61 = __dllonexit(Mem60[esp_31 - 16:_onexit_t], Mem60[esp_31 - 12:(ptr32 (ptr32 PVFV))], Mem60[esp_31 - 8:(ptr32 (ptr32 PVFV))])
	Mem62[ebp_13 - 0x00000024:word32] = eax_61
	Mem65[esp_31 - 20:word32] = Mem62[ebp_13 - 0x0000001C:word32]
	word32 esp_67
	word32 eax_68
	word32 ecx_69
	int8 Top_70
	call encode_pointer (retsize: 4;)
		uses: eax:eax_61,ebp:ebp_13,ebx:ebx,ecx:ecx_36,edi:edi,esi:encode_pointer,esp:esp_31 - 20,fs:fs,Stack +0000:0x00000014,Stack +FFFFFFF8:dwLoc0C,Stack +FFFFFFFC:0x10002210,Top:Top_34
		defs: eax:eax_68,ecx:ecx_69,esp:esp_67,Top:Top_70
	Mem72[0x100033B4:word32] = eax_68
	Mem75[esp_67 - 4:word32] = Mem72[ebp_13 - 0x00000020:word32]
	word32 esp_76
	word32 eax_77
	word32 ecx_78
	call encode_pointer (retsize: 4;)
		uses: eax:eax_68,ebp:ebp_13,ebx:ebx,ecx:ecx_69,edi:edi,esi:encode_pointer,esp:esp_67 - 4,fs:fs,Stack +0000:0x00000014,Stack +FFFFFFF8:dwLoc0C,Stack +FFFFFFFC:0x10002210,Top:Top_70
		defs: eax:eax_77,ecx:ecx_78,esp:esp_76
	Mem83[0x100033B0:word32] = eax_77
	Mem84[ebp_13 - 0x00000004:word32] = 0xFFFFFFFE
	fn10001665(ecx_78)
	esp_81 = esp_76 + 0x0000001C
	eax_110 = Mem84[ebp_13 - 0x00000024:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l100015F2:
	Mem90[esp_14 - 4:word32] = Mem26[ebp_13 + 0x00000008:word32]
	eax_110 = _onexit(Mem90[esp_14 - 4:_onexit_t])
	esp_81 = esp_14
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1000165F:
	fn1000182D(ebp_13, Mem97[esp_81 + -4:word32])
	return eax_110
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn100015CF_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn10001665(word32 ecx)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ecx:[0..31]
// LiveOut:
// Trashed: ecx Top
// Preserved: esp
fn10001665_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l10001665:
	call unlock (retsize: 4;)
		uses: ecx:ecx,esp:fp - 4,Stack +0004:0x00000008,Top:0
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn10001665_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn1000166E(word32 ebx, word32 esi, word32 edi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ebx:[0..31] edi:[0..31] esi:[0..31] fs:[0..15]
// LiveOut:
// Trashed: SCZO eax ebp ebx ecx edi esi Top
// Preserved: esp
fn1000166E_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1000166E:
	fn100015CF(ebx, esi, edi)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn1000166E_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn10001680(word32 esi, word32 edi)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  edi:[0..31] esi:[0..31]
// LiveOut:
// Trashed: SCZO eax esi esp Top
// Preserved: edi
fn10001680_entry:
	int8 Top_25 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l10001680:
	word32 esp_21 = fp - 8
	word32 esi_13 = 0x100021D8
	branch true l100016A1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l10001692:
	word32 eax_17 = Mem9[esi_13:word32]
	branch eax_17 == 0x00000000 l1000169A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l10001698:
	call fn00000000 (retsize: 4;)
		uses: eax:eax_17,edi:0x100021D8,esi:esi_15,esp:esp_21,Stack +0000:esi,Stack +FFFFFFFC:edi,Top:Top_25
		defs: esp:esp_22,Top:Top_26
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1000169A:
	esi_13 = esi_13 + 0x00000004
	branch esi_13 <u 0x100021D8 l10001692
// DataOut:
// DataOut (flags):
// SymbolicIn:

l100016A1:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn10001680_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn100016D0(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31]
// LiveOut: eax
// Trashed: SCZO eax ecx Top
// Preserved: esp
fn100016D0_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l100016D0:
	branch Mem0[dwArg04:word16] == 0x5A4D l100016DE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l100016DE:
	word32 eax_9 = Mem0[dwArg04 + 0x0000003C:word32] + dwArg04
	branch Mem0[eax_9:word32] != 0x00004550 l100016DB
// DataOut:
// DataOut (flags):
// SymbolicIn:

l100016EB:
	return (word32) (Mem0[eax_9 + 0x00000018:word16] == 0x010B)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l100016DB:
	return 0x00000000
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn100016D0_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn10001700(word32 dwArg04, word32 dwArg08, ptr32 & edxOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax edx
// Trashed: SCZO eax ecx edx Top
// Preserved: ebx edi esi esp
fn10001700_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l10001700:
	word32 ecx_7 = Mem0[dwArg04 + 0x0000003C:word32] + dwArg04
	word32 esi_15 = (word32) Mem14[ecx_7 + 0x00000006:word16]
	word32 edx_16 = 0x00000000
	word32 eax_22 = (word32) Mem0[ecx_7 + 0x00000014:word16] + 0x00000018 + ecx_7
	branch esi_15 <=u 0x00000000 l1000173C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1000171E:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l10001722:
	word32 ecx_28 = Mem21[eax_22 + 0x0000000C:word32]
	branch dwArg08 <u ecx_28 l10001732
// DataOut:
// DataOut (flags):
// SymbolicIn:

l10001729:
	branch dwArg08 <u Mem21[eax_22 + 0x00000008:word32] + ecx_28 l1000173E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l10001732:
	edx_16 = edx_16 + 0x00000001
	eax_22 = eax_22 + 0x00000028
	branch edx_16 <u esi_15 l10001722
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1000173C:
	eax_22 = 0x00000000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1000173E:
	edxOut = edx_16
	return eax_22
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn10001700_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn10001742(word32 ebx, word32 esi, word32 edi, ptr32 & edxOut, ptr32 & ediOut)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ebx:[0..31] edi:[0..31] esi:[0..31] fs:[0..15]
// LiveOut: eax edi edx esp
// Trashed: SCZO eax ebp ebx ecx edi edx esi esp Top
// Preserved:
fn10001742_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l10001742:
	word32 eax_60
	word32 ebp_13 = fn100017E8(ebx, esi, edi, dwLoc0C, 0x00000008)
	Mem20[ebp_13 - 0x00000004:word32] = Mem7[ebp_13 - 0x00000004:word32] & 0x00000000
	word32 esp_14 = <invalid>
	Mem25[esp_14 - 4:word32] = 0x10000000
	word32 edx_23 = 0x10000000
	branch fn100016D0(Mem25[esp_14 - 4:word32]) == 0x00000000 l1000179F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l10001762:
	Mem41[esp_14 - 4:word32] = Mem25[ebp_13 + 0x00000008:word32] - 0x10000000
	Mem43[esp_14 - 8:word32] = 0x10000000
	word32 eax_44 = fn10001700(Mem43[esp_14 - 8:word32], Mem43[esp_14 - 4:word32], out edx_23)
	branch eax_44 == 0x00000000 l1000179F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1000179F:
	Mem59[ebp_13 - 0x00000004:word32] = 0xFFFFFFFE
	eax_60 = 0x00000000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l10001774:
	eax_60 = ~(Mem43[eax_44 + 0x00000024:word32] >>u 0x0000001F) & 0x00000001
	Mem69[ebp_13 - 0x00000004:word32] = 0xFFFFFFFE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l100017A8:
	word32 edi_79 = fn1000182D(ebp_13, Mem75[esp_14 + -4:word32])
	edxOut = edx_23
	ediOut = edi_79
	return eax_60
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn10001742_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn100017C6(word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: eax
// Trashed: SCZO eax Top
// Preserved: esp
fn100017C6_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l100017C6:
	branch dwArg08 != 0x00000001 l100017E0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l100017CD:
	branch Mem0[0x100020CC:word32] != 0x00000000 l100017E0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l100017D6:
	DisableThreadLibraryCalls(dwArg04)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l100017E0:
	return 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn100017C6_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn100017E8(word32 ebx, word32 esi, word32 edi, word32 dwArg00, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ebx:[0..31] edi:[0..31] esi:[0..31] fs:[0..15] Stack +0000:[0..31] Stack +0008:[0..31]
// LiveOut: ebp esp
// Trashed: SCZO eax ebp esp Top
// Preserved:
fn100017E8_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l100017E8:
	word32 esp_14 = fp - 8 - dwArg08
	Mem17[esp_14 - 4:word32] = ebx
	Mem20[esp_14 - 8:word32] = esi
	Mem23[esp_14 - 12:word32] = edi
	Mem32[esp_14 - 16:word32] = Mem23[0x10003000:word32] ^ fp + 0x00000008
	Mem36[esp_14 - 20:word32] = dwArg00
	Mem41[fs:0x00000000:word32] = fp - 0x00000008
	return fp + 0x00000008
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn100017E8_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn1000182D(word32 ebp, word32 dwArg00)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  ebp:[0..31] fs:[0..15] Stack +0000:[0..31]
// LiveOut: edi esp
// Trashed: ebp ebx ecx edi esi esp Top
// Preserved:
fn1000182D_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1000182D:
	Mem8[fs:0x00000000:word32] = Mem0[ebp - 0x00000010:word32]
	Mem22[ebp:word32] = dwArg00
	return dwArg08
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn1000182D_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn10001864()
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse: 
// LiveOut:
// Trashed: SCZO eax Top
// Preserved: ebp ebx edi esi esp
fn10001864_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l10001864:
	word32 eax_9 = Mem6[0x10003000:word32]
	branch eax_9 == 0xBB40E64E l10001894
// DataOut:
// DataOut (flags):
// SymbolicIn:

l10001887:
	branch (eax_9 & 0xFFFF0000) == 0x00000000 l10001894
// DataOut:
// DataOut (flags):
// SymbolicIn:

l10001894:
	GetSystemTimeAsFileTime(fp - 0x0000000C)
	word32 esi_46 = dwLoc08 & 0x00000000 ^ dwLoc0C & 0x00000000 ^ GetCurrentProcessId() ^ GetCurrentThreadId() ^ GetTickCount()
	QueryPerformanceCounter(fp - 0x00000014)
	word32 esi_54 = esi_46 ^ (dwLoc10 ^ dwLoc14)
	branch esi_54 != 0xBB40E64E l100018DA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l100018DA:
	branch (esi_54 & 0xFFFF0000) != 0x00000000 l100018E5
// DataOut:
// DataOut (flags):
// SymbolicIn:

l100018DE:
	esi_54 = esi_54 | esi_54 << 0x00000010
// DataOut:
// DataOut (flags):
// SymbolicIn:

l100018D3:
	esi_54 = 0xBB40E64F
// DataOut:
// DataOut (flags):
// SymbolicIn:

l100018E5:
	Mem69[0x10003000:word32] = esi_54
	Mem71[0x10003004:word32] = ~esi_54
// DataOut:
// DataOut (flags):
// SymbolicIn:

l1000188B:
	Mem76[0x10003004:word32] = ~eax_9
// DataOut:
// DataOut (flags):
// SymbolicIn:

l100018F4:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn10001864_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



