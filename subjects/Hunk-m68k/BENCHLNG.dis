void fn00001000(word32 d0, word32 a0)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31] d0:[0..31]
// LiveOut:
// Trashed: CVZNX a0 a1 a2 a3 a4 a5 a6 a7 d0 d1 d2 d3 d4 d5 d6 d7
// Preserved:
fn00001000_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001000:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000100A:
	word32 a6_9 = Mem0[0x00000004:word32]
	word32 d2_102 = d0
	word32 a2_196 = a0
	branch Mem0[a6_9 + 20:word16] >=u 0x0024 l00001036
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001020:
	word32 a0_13 = 0x00003E20
	word32 d0_16 = 0x0000BE46 >>u 0x00000002
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001030:
	Mem19[a0_13:word32] = 0x00000000
	a0_13 = a0_13 + 4
	d0_16 = d0_16 - 0x00000001
	branch d0_16 != 0x00000000 l00001030
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001036:
	Mem30[0x00003E20:word32] = fp
	Mem34[0x00003E24:word32] = a6_9
	word32 d0_37 = FindTask(0x00000000)
	word32 a1_255 = 0x000012BC
	word32 d0_112 = OpenLibrary(0x000012BC, 0)
	branch d0_112 == 0x00000000 l00001226
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001226:
	Alert(0x00038007)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001056:
	word32 d4_75
	Mem68[0x00003E28:word32] = d0_112
	branch Mem68[d0_37 + 172:word32] != 0x00000000 l00001066
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001066:
	word32 a0_74 = a0
	d4_75 = 3
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000106A:
	branch Mem68[a0_698:byte] != 0x20 l00001072
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001070:
	d4_75 = DPB(d4_75, (word16) d4_75 + 0x0001, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001072:
	a0_74 = a0_698 + 1
	a0_698 = a0_74
	branch Mem68[a0_698:byte] != 0x00 l0000106A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001060:
	d4_75 = 2
	d2_102 = 8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001076:
	word32 d0_100 = d4_75 << 0x00000002
	word32 d0_107 = d0_100 + d2_102
	word32 d1_111 = 0x00010001
	d0_112 = AllocMem(d0_107 + 0x00000011, 0x00010001)
	branch d0_112 == 0x00000000 l0000123E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000123E:
	CloseLibrary(Mem68[0x00003E28:word32])
	Alert(0x00010000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000125C:
	branch Mem153[d0_37 + 172:word32] != 0x00000000 l00001268
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001262:
	fn00001214(d0_37)
	fn0000126C(d0_112)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001268:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001096:
	word32 a0_438
	word32 dwLoc0C_583
	Mem169[d0_112:word32] = d0_107 + 0x00000011
	Mem173[d0_112 + 12:word32] = d4_75 - 0x00000001
	Mem177[d0_112 + 8:word32] = d0_112 + 16 + d0_100
	Mem179[0x00000000:word32] = 0x00000000
	word32 d0_180 = Mem179[d0_37 + 172:word32]
	branch d0_180 == 0x00000000 l00001190
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001190:
	fn00001214(d0_37)
	Mem187[0x00003E2C:word32] = d0_180
	Mem189[0x00003E30:word32] = d0_180
	Mem194[0x00000000:word32] = 0x00000000
	dwLoc0C_583 = d0_180
	a2_196 = d0_180
	word32 d0_197 = Mem194[d0_180 + 36:word32]
	branch d0_197 == 0x00000000 l000011B6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000011AE:
	Enable()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000011B6:
	Supervisor(d0_112)
	Mem209[d0_112 + 4:word32] = d0_197
	d1_111 = 0x000012C8
	d2_102 = 0x000003ED
	branch d0_197 != 0x00000000 l000011D2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000011D2:
	Mem214[0x00003E34:word32] = d0_197
	Mem216[0x00003E38:word32] = d0_197
	Mem218[0x00003E3C:word32] = d0_197
	Mem221[d0_37 + 156:word32] = d0_197
	Mem223[d0_37 + 160:word32] = d0_197
	word32 d0_227 = Mem223[(d0_197 << 0x00000002) + 8:word32]
	branch d0_227 == 0x00000000 l000011F4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000011F0:
	Mem231[d0_37 + 164:word32] = d0_227
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000011F4:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000011CC:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000011CE_thunk_fn0000127C:
	fn0000127C(20, out a1_694, out a5_695)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010B6:
	word32 d0_252 = Mem179[(d0_180 << 0x00000002) + 16:word32]
	a1_255 = Mem179[d0_112 + 8:word32]
	word32 a0_260 = (d0_252 << 0x00000002) + 1
	word32 d0_261 = (int32) Mem179[d0_252 << 0x00000002:byte]
	Mem262[a0_260 + d0_261:byte] = 0x00
	Mem264[d0_112 + 16:word32] = a0_260
	word32 a6_265 = d0_112 + 20
	word32 d3_266 = 1
	word32 a0_271 = a0 + d2_102
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010DA:
	a0_271 = a0_271 - 1
	branch Mem264[a0_271:byte] >u 0x20 l000010E2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010DE_1:
	word16 v36_279 = SLICE(d2_102, word16, 0)
	d2_102 = DPB(d2_102, v36_279 - 1, 0)
	branch v36_279 != 0x0000 l000010DA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010E2:
	Mem283[a0_271 + 1:byte] = 0x00
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010E6:
	byte v38_290 = Mem289[a2_196:byte]
	a2_196 = a2_196 + 1
	d1_111 = DPB(d1_111, v38_290, 0)
	branch v38_290 == 0x00 l00001148
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010EA:
	branch v38_290 == 0x20 l000010E6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010F0:
	branch v38_290 == 0x09 l000010E6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010F6:
	branch d3_266 - Mem289[d0_112 + 12:word32] == 0x00000000 l00001148
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000010FC:
	Mem310[a6_265:word32] = a1_255
	a6_265 = a6_265 + 4
	d3_266 = DPB(d3_266, (word16) d3_266 + 0x0001, 0)
	branch v38_290 == 0x22 l0000111A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000111A:
	byte v65_320 = Mem319[a2_196:byte]
	a2_196 = a2_196 + 1
	d1_111 = DPB(d1_111, v65_320, 0)
	branch v65_320 == 0x00 l00001148
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000111E:
	branch v65_320 == 0x22 l00001116
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001124:
	branch v65_320 != 0x2A l00001144
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000112A:
	byte v68_332 = Mem319[a2_196:byte]
	a2_196 = a2_196 + 1
	d1_111 = DPB(d1_111, v68_332, 0)
	d2_102 = DPB(d2_102, v68_332 & 0xDF, 0)
	branch (v68_332 & 0xDF) != 0x4E l0000113C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000113C:
	branch (v68_332 & 0xDF) != 0x45 l00001144
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001142:
	d1_111 = 27
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001138:
	d1_111 = 10
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001144:
	Mem354[a1_255:byte] = (byte) d1_111
	a1_255 = a1_255 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001106:
	Mem358[a1_255:byte] = v38_290
	a1_255 = a1_255 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001108:
	byte v46_363 = Mem362[a2_196:byte]
	a2_196 = a2_196 + 1
	d1_111 = DPB(d1_111, v46_363, 0)
	branch v46_363 == 0x00 l00001148
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001148:
	Mem371[a1_255:byte] = 0x00
	Mem376[a6_265:word32] = 0x00000000
	execPrivate4()
	Mem407[0x00003E34:word32] = d0_261
	execPrivate5()
	Mem409[0x00003E38:word32] = d0_261
	dwLoc0C_583 = d0_112 + 16
	dwLoc10 = d3_266
	branch Mem409[Mem409[0x00003E24:word32] + 20:word16] <u 0x0024 l0000117A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001172:
	word32 v82_419 = Mem409[d0_37 + 224:word32]
	Mem420[0x00003E3C:word32] = v82_419
	branch v82_419 != 0x00000000 l0000117E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000117A:
	Mem426[0x00003E3C:word32] = d0_261
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000117E:
	branch Mem430[d0_37 + 8:byte] != 0x0D l000011F8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000011F8:
	a0_438 = Mem436[d0_37 + 58:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001186:
	word32 a0_441 = Mem430[d0_37 + 176:word32]
	a0_438 = a0_441 + 4 - Mem430[a0_441:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001202:
	Mem452[0x00003E48:word32] = a0_438
	Mem460[0x00003E4C:word32] = fp - 16
	fn00001354(d1_111, d2_102, a0_438, a1_255, a2_196, d0_37, d0_112, dwLoc10, dwLoc0C_583)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001212_thunk_fn0000127C:
	fn0000127C(0, out a1_696, out a5_697)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001000_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000110C:
	branch v46_363 == 0x20 l00001116
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001116:
	Mem532[a1_255:byte] = 0x00
	a1_255 = a1_255 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001112:
	Mem539[a1_255:byte] = v46_363
	a1_255 = a1_255 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn00001214(word32 a3)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a3:[0..31]
// LiveOut:
// Trashed: a0
// Preserved: a7
fn00001214_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001214:
	WaitPort(a3 + 92)
	GetMsg(a3 + 92)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001214_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn0000126C(word32 a2)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a2:[0..31]
// LiveOut:
// Trashed: a1
// Preserved: a7
fn0000126C_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000126C:
	Forbid()
	ReplyMsg(a2)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000126C_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00001278(word32 dwArg04, ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31]
// LiveOut: a1 a5 d1
// Trashed: CVZN a1 a2 a4 a5 a6 a7 d0 d1 d2
// Preserved:
fn00001278_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001278:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001278_thunk_fn0000127C:
	word32 a1_6
	word32 a5_9
	word32 d1_13 = fn0000127C(dwArg04, out a1_6, out a5_9)
	a1Out = a1_6
	a5Out = a5_9
	return d1_13
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001278_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn0000127C(word32 d2, ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d2:[0..31]
// LiveOut: a1 a5 d1
// Trashed: CVZN a1 a2 a4 a5 a6 a7 d0 d1
// Preserved:
fn0000127C_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000127C:
	word32 a7_6 = Mem0[0x00003E20:word32]
	word32 v7_11 = Mem0[a7_6 - 4:word32]
	word32 v5_8 = Mem0[a7_6 - 8:word32]
	word32 d1_14 = Mem0[v7_11 + 4:word32]
	branch d1_14 == 0x00000000 l0000129E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001296:
	execPrivate1()
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000129E:
	CloseLibrary(Mem0[0x00003E28:word32])
	branch v5_8 == 0x00000000 l000012B0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000012AE:
	fn0000126C(v5_8)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000012B0:
	FreeMem(v7_11, Mem0[v7_11:word32])
	a1Out = v7_11
	a5Out = v7_11
	return d1_14
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000127C_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn000012D0(word32 d2, word32 a2, word32 a3, word32 dwArg04, ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a2:[0..31] a3:[0..31] d2:[0..31] Stack +0004:[0..31]
// LiveOut: a1 a5 d1
// Trashed: CVZNX a1 a4 a5 a6 d0 d1
// Preserved: a2 a3 a7 d2
fn000012D0_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000012D0:
	branch 0x00003F68 == 0x00000000 l00001308
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000012E2:
	word32 d2_16 = 1
	branch Mem11[0x00003F6C:word32] == 0x00000000 l000012F6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000012EA:
	d2_16 = d2_16 + 0x00000001
	branch Mem11[0x00003F68 + (d2_16 << 0x00000002):word32] != 0x00000000 l000012EA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000012F6:
	word32 d2_33 = d2_16 - 0x00000001
	branch d2_33 == 0x00000000 l00001308
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000012FA:
	word32 d0_38 = d2_33 << 0x00000002
	call Mem11[0x00003F68 + d0_38:word32] (retsize: 4;)
		uses: d0:d0_38,Stack +0000:dwLoc10,Stack +0004:d2,Stack +0008:a2,Stack +000C:a3,Stack +0014:dwArg04
	d2_33 = d2_33 - 0x00000001
	branch d2_33 != 0x00000000 l000012FA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001308:
	word32 a1_59
	word32 a5_62
	word32 d1_66 = fn00001278(dwArg04, out a1_59, out a5_62)
	a1Out = a1_59
	a5Out = a5_62
	return d1_66
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn000012D0_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn0000131C(word32 d2, word32 a2, word32 a3, word32 dwArg04, ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a2:[0..31] a3:[0..31] d2:[0..31] Stack +0004:[0..31]
// LiveOut: a1 a5 d1
// Trashed: CVZN a1 a4 a5 a6 d0 d1
// Preserved: X a2 a3 a7
fn0000131C_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000131C:
	branch Mem8[0x00003E50:word32] != 0x00000000 l0000134E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001328:
	word32 a3_13 = Mem8[0x00003F78:word32]
	Mem16[0x00003E50:word32] = 1
	word32 d0_17 = a3_13
	branch a3_13 == 0x00000000 l00001346
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000133A:
	a2 = Mem16[a3_13 + 4:word32]
	call a2 (retsize: 4;)
		uses: d0:d0_24,Stack +0000:dwLoc0C,Stack +0004:a2,Stack +0008:a3,Stack +0010:dwArg04
	a3_13 = Mem16[a3_13:word32]
	d0_17 = a3_13
	branch a3_13 != 0x00000000 l0000133A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001346:
	d1 = fn000012D0(d2, a2, a3_13, dwArg04, out a1, out a5)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000134E:
	a1Out = a1
	a5Out = a5
	return d1
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000131C_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn00001354(word32 d1, word32 d2, word32 a0, word32 a1, word32 a2, word32 a3, word32 a5, word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a0:[0..31] a1:[0..31] a2:[0..31] a3:[0..31] a5:[0..31] d1:[0..31] d2:[0..31] Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut:
// Trashed: CVZNX a0 a1 a4 a5 a6 d0 d1 d4 d5 d6 d7
// Preserved: a2 a3 a7
fn00001354_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001354:
	word32 a3_17 = 0x00003F60
	word32 d0_10 = 0x00003F5C
	branch 0x00003F5C == 0x00000000 l00001372
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001366:
	branch Mem8[0x00003F60:word32] == 0x00000000 l00001372
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000136A:
	call Mem8[a3_17:word32] (retsize: 4;)
		uses: a0:a0_94,d0:d0_23,Stack +0000:dwLoc0C,Stack +0004:a2,Stack +0008:a3,Stack +0010:dwArg04,Stack +0014:dwArg08,Stack +FFFFFFF8:dwLoc14,Stack +FFFFFFFC:dwLoc10
		defs: a0:a0_95,d0:d0_24
	a3_17 = a3_17 + 4
	branch Mem8[a3_17:word32] != 0x00000000 l0000136A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001372:
	word32 a2_54
	word32 a3_55
	fn0000131C(d2, a2_54, a3_55, fn00001390(d0_10, d1, a1, a3_17, a5, out a2_54, out a3_55), out a1_129, out a5_130)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001354_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00001390(word32 d0, word32 d1, word32 a1, word32 a3, word32 a5, ptr32 & a2Out, ptr32 & a3Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1:[0..31] a3:[0..31] a5:[0..31] d0:[0..31] d1:[0..31]
// LiveOut: a2 a3 d0
// Trashed: CVZNX a0 a1 a2 a3 a4 a5 a6 d0 d1 d4 d5 d6 d7
// Preserved: a7 d2 d3
fn00001390_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001390:
	word32 a3_25
	word32 a1_50
	word32 a3_52
	word32 a5_54
	word32 d1_57
	word32 a1_77
	word32 a3_79
	word32 a5_81
	word32 d1_84
	word32 a3_106
	word32 d0_110 = fn00002BF0(fn00002BF0(fn000015A4(fn00002BF0(d0, d1, a1, a3, a5, 0x0000147C, out d1_307, out a1_308, out a3_25, out a5_309), a3_25, 0x00001480, out d1_57, out a1_50, out a2_310, out a3_52, out a5_54), d1_57, a1_50, a3_52, a5_54, 0x0000149C, out d1_84, out a1_77, out a3_79, out a5_81), d1_84, a1_77, a3_79, a5_81, 0x000014A0, out d1_311, out a1_312, out a3_106, out a5_313)
	word32 d3_123 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000145A:
	branch d3_123 - dwLoc04 <= 0x00000000 l000013DE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000013DE:
	word32 d2_132 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001452:
	d0_110 = 40
	branch d2_132 <= 40 l000013E2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000013E2:
	word32 d0_172
	word32 d1_144 = dwLoc14 + dwLoc10 + d2_132
	fn000014AC(d2_132, d1_144 >> 0x00000001, 0x0000000A)
	branch d2_132 - (d1_144 >> 0x00000001) == 0x00000000 l0000141A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000141A:
	d0_172 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001416:
	d0_172 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000141C:
	word32 d0_187
	branch (d0_172 | d2_132) != 0x00000000 l00001430
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001430:
	d0_187 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000142C:
	d0_187 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001432:
	word32 d0_204
	word32 d0_197 = d0_187 + d2_132
	dwLoc10 = d0_197
	branch d2_132 - d0_197 < 0x00000000 l0000144A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000144A:
	d0_204 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001446:
	d0_204 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000144C:
	dwLoc14 = d0_204
	d2_132 = d2_132 + 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001458:
	d3_123 = d3_123 + 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001462:
	word32 a2_236
	word32 a3_237
	word32 d0_241 = fn000015A4(d0_110, a3_106, 0x000014A4, out d1_314, out a1_315, out a2_236, out a3_237, out a5_316)
	a2Out = a2_236
	a3Out = a3_237
	return d0_241
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001390_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn000014AC(word32 d2, word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d2:[0..31] Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut:
// Trashed: CVZNX d0 d1
// Preserved: a7
fn000014AC_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000014AC:
	branch dwArg08 < 0x00000000 l000014C0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000014C0:
	word32 d1_13 = -dwArg08
	branch dwArg04 < 0x00000000 l000014D6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000014D6:
	fn0000151E(-dwArg04, d1_13, d2, out d1_23)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000014C6:
	fn0000151E(dwArg04, d1_13, d2, out d1_34)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000014B6:
	branch dwArg04 < 0x00000000 l000014CC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000014CC:
	fn0000151E(-dwArg04, dwArg08, d2, out d1_49)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000014BA:
	fn0000151E(dwArg04, dwArg08, d2, out d1_60)
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn000014AC_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn000014EC(word32 d2, word32 dwArg04, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d2:[0..31] Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: d0
// Trashed: CVZNX d0 d1
// Preserved: a7
fn000014EC_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000014EC:
	branch dwArg04 > 0x00000000 l0000150C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000150C:
	branch dwArg08 > 0x00000000 l0000150E_thunk_fn0000151E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000150E_thunk_fn0000151E:
	return fn0000151E(dwArg04, dwArg08, d2, out d1_88)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001510:
	return -fn0000151E(dwArg04, -dwArg08, d2, out d1_89)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000014F6:
	word32 d0_36 = -dwArg04
	branch dwArg08 > 0x00000000 l00001504
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001504:
	return -fn0000151E(d0_36, dwArg08, d2, out d1_43)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000014FC:
	return fn0000151E(d0_36, -dwArg08, d2, out d1_55)
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn000014EC_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn0000151E(word32 d0, word32 d1, word32 d2, ptr32 & d1Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d0:[0..31] d1:[0..31] d2:[0..31]
// LiveOut: d0 d1
// Trashed: CVZNX d0 d1
// Preserved: a7 d2 d3
fn0000151E_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000151E:
	word32 d1_21 = __swap(d1)
	word16 v10_9 = (word16) d1_21
	word32 d2_10 = DPB(d2, v10_9, 0)
	branch v10_9 != 0x0000 l00001544
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001544:
	word32 d3_17 = 16
	branch (word16) d1_21 >=u 0x0080 l00001552
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000154E:
	d1_21 = __rol(d1_21, 0x00000008)
	d3_17 = 8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001552:
	branch (word16) d1_21 >=u 0x0800 l0000155C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001558:
	d1_21 = __rol(d1_21, 0x00000004)
	d3_17 = DPB(d3_17, (word16) d3_17 - 0x0004, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000155C:
	branch (word16) d1_21 >=u 0x2000 l00001566
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001562:
	d1_21 = __rol(d1_21, 0x00000002)
	d3_17 = DPB(d3_17, (word16) d3_17 - 0x0002, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001566:
	branch (word16) d1_21 < 0x0000 l0000156E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000156A:
	d1_21 = __rol(d1_21, 0x00000001)
	d3_17 = DPB(d3_17, (word16) d3_17 - 0x0001, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000156E:
	word32 d2_68 = DPB(__swap(DPB(d2, (word16) d0, 0)), 0x0000, 0) >>u d3_17
	word32 d0_65 = d0 >>u d3_17
	word32 d3_69 = __swap(d3_17)
	uint16 v39_72 = (uint16) (d0_65 /u (uint16) d1_21)
	word32 d1_81 = __swap(d1_21)
	word32 d3_76 = DPB(d3_69, v39_72, 0)
	word32 d0_83 = DPB(DPB(d0_65, (uint16) (d0_65 % (uint16) d1_21), 16), (word16) d2_68, 0) - DPB(d2_68, v39_72, 0) *u (word16) d1_81
	branch d0_83 >=u 0x00000000 l00001590
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000158A:
	d3_76 = DPB(d3_69, v39_72 - 0x0001, 0)
	d0_83 = d0_83 + d1_81
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000158E:
	branch d0_83 >=u 0x00000000 l0000158E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001590:
	d1Out = __swap(__rol(d0_83, __swap(d3_76)))
	return (int32) (word16) d3_76
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001526:
	word32 d0_123 = __swap(d0)
	word32 d1_124 = __swap(d1_21)
	word16 v13_126 = (word16) d0_123
	word32 d2_127 = DPB(__swap(d2_10), v13_126, 0)
	branch v13_126 == 0x0000 l00001534
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001530:
	uint16 v15_131 = (uint16) (d2_127 /u (uint16) d1_124)
	d2_127 = DPB(DPB(d2_127, (uint16) (d2_127 % (uint16) d1_124), 16), v15_131, 0)
	d0_123 = DPB(d0_123, v15_131, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001534:
	word32 d0_138 = __swap(d0_123)
	word32 d2_141 = DPB(d2_127, (word16) d0_138, 0)
	uint16 v28_144 = (uint16) (d2_141 /u (uint16) d1_124)
	d1Out = DPB(d1_124, (word16) __swap(DPB(DPB(d2_141, (uint16) (d2_141 % (uint16) d1_124), 16), v28_144, 0)), 0)
	return DPB(d0_138, v28_144, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000151E_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn000015A4(word32 d0, word32 a3, word32 dwArg04, ptr32 & d1Out, ptr32 & a1Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a3:[0..31] d0:[0..31] Stack +0004:[0..31]
// LiveOut: a1 a2 a3 a5 d0 d1
// Trashed: CVZNX a0 a1 a2 a3 a4 a5 a6 d0 d1 d2 d3 d4 d5 d6 d7
// Preserved: a7
fn000015A4_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000015A4:
	word32 a2_18
	word32 a3_19
	word32 a5_21
	word32 a1_31
	word32 d1_32
	word32 d0_24 = fn000015C0(d0, a3, Mem10[0x00003F80:word32], dwArg04, fp + 8, out d1_32, out a1_31, out a2_18, out a3_19, out a5_21)
	d1Out = d1_32
	a1Out = a1_31
	a2Out = a2_18
	a3Out = a3_19
	a5Out = a5_21
	return d0_24
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn000015A4_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn000015C0(word32 d0, word32 a3, word32 dwArg04, word32 dwArg08, word32 dwArg0C, ptr32 & d1Out, ptr32 & a1Out, ptr32 & a2Out, ptr32 & a3Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a3:[0..31] d0:[0..31] Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: a1 a2 a3 a5 d0 d1
// Trashed: CVZNX a0 a1 a2 a3 a4 a5 a6 a7 d0 d1 d2 d3 d4 d5 d6 d7
// Preserved:
fn000015C0_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000015C0:
	word32 d0_1922
	word32 a7_1575 = fp + -112
	word32 d3_1452 = dwArg0C
	word32 a5_1549 = dwArg04
	word32 a4_1895 = dwArg08
	word32 d6_1450 = 0
	branch Mem36[dwArg08:byte] == 0x00 l00001F06
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000015DC:
	branch Mem46[a4_1895:byte] != 0x25 l00001EE0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001EE0:
	word32 a7_51 = a7_1575 - 4
	Mem54[a7_51:word32] = a5_1549
	Mem63[a7_51 - 4:word32] = (int32) (int16) Mem54[a4_1895:byte]
	a4_1895 = a4_1895 + 1
	d0 = fn00001F40(a3, Mem63[a7_51 - 4:word32], Mem63[a7_51:word32], out d1, out a0_66, out a1, out a5_1549)
	a7_1575 = a7_51 + 4
	branch d0 != 0xFFFFFFFF l00001EFE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001EFE:
	d6_1450 = d6_1450 + 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001EFA:
	d0_1922 = d6_1450
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000015E4:
	Mem85[a7_1575 + 64:word32] = 0x00000000
	Mem87[a7_1575 + 72:word32] = 0x00000000
	Mem91[a7_1575 + 102:word32] = 0x00000000
	word32 d5_248 = -1
	word32 d4_360 = 105
	a3 = a7_1575 + 76
	word32 d7_1000 = 0
	word32 a2_134 = a4_1895 + 1
	word32 d2_129 = Mem91[a7_1575 + 72:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001602:
	word32 d1_103 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001604:
	word32 a7_99 = a7_1575 - 4
	Mem102[a7_99:word32] = d0
	d0 = Mem102[a7_99:word32]
	branch Mem102[0x00001F18 + d1_103:byte] - Mem102[a2_134:byte] != 0x00 l00001628
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001628:
	d1_103 = d1_103 + 0x00000001
	branch d1_103 <u 0x00000005 l00001604
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001616:
	Mem120[a7_99:word32] = d1_103
	word32 d1_122 = 1 << d1_103
	d0 = d1_122
	d1_103 = Mem120[a7_99:word32]
	d2_129 = d2_129 | d1_122
	a2_134 = a2_134 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001632:
	branch d1_103 <u 0x00000005 l00001602
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000163A:
	word32 a0_1417
	word32 d0_156
	Mem142[a7_1575 + 72:word32] = d2_129
	branch Mem142[a2_134:byte] != 0x2A l00001678
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001678:
	a0_1417 = 0x000028C5 + (DPB(d0, Mem142[a2_134:byte], 0) & 0x000000FF)
	word32 d0_155 = (int32) Mem142[a0_1417:byte]
	d0_156 = d0_155 & 0x00000004
	branch (d0_155 & 0x00000004) == 0x00000000 l000016E4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001694:
	d2_129 = Mem142[a7_1575 + 64:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001698:
	Mem168[a7_1575 - 4:word32] = d3_1452
	word32 d1_174 = __swap(10) *u (word16) d2_129
	word32 d0_181 = (word16) d2_129 *u 10 + DPB(__swap(DPB(d1_174, (word16) (d1_174 + __swap(d2_129) *u 0x000A), 0)), 0x0000, 0)
	a2_134 = a2_134 + 1
	a0_1417 = 0x000028C5 + (DPB(d0_181, Mem168[a2_134:byte], 0) & 0x000000FF)
	word32 d1_190 = (int32) (int16) Mem168[a2_134:byte]
	word32 d0_202 = (int32) Mem168[a0_1417:byte]
	d3_1452 = Mem168[a7_1575 - 4:word32]
	d1_103 = d1_190 - 0x00000030
	d2_129 = d1_190 - 0x00000030 + d0_181
	d0_156 = d0_202 & 0x00000004
	branch (d0_202 & 0x00000004) != 0x00000000 l00001698
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000016E0:
	Mem209[a7_1575 + 64:word32] = d2_129
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001644:
	d0_156 = d3_1452 + 0x00000003 >>u 0x00000002 << 0x00000002
	word32 v36_224 = Mem142[d0_156:word32]
	Mem225[a7_1575 + 44:word32] = v36_224
	a2_134 = a2_134 + 1
	d3_1452 = d0_156 + 0x00000004
	a0_1417 = d0_156 + 0x00000004
	branch v36_224 >= 0x00000000 l00001670
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001670:
	Mem229[a7_1575 + 64:word32] = Mem225[a7_1575 + 44:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000165C:
	Mem232[a7_1575 + 72:word32] = Mem225[a7_1575 + 72:word32] | 0x00000004
	d0_156 = -Mem232[a7_1575 + 44:word32]
	Mem237[a7_1575 + 64:word32] = d0_156
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000016E4:
	branch Mem240[a2_134:byte] != 0x2E l00001778
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000016EC:
	a2_134 = a2_134 + 1
	branch Mem240[a2_134:byte] != 0x2A l00001712
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001712:
	a0_1417 = 0x000028C5 + (DPB(d0_156, Mem240[a2_134:byte], 0) & 0x000000FF)
	word32 d0_257 = (int32) Mem240[a0_1417:byte]
	d5_248 = 0
	d0_156 = d0_257 & 0x00000004
	branch (d0_257 & 0x00000004) == 0x00000000 l00001778
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001730:
	word32 a7_265 = a7_1575 - 4
	Mem268[a7_265:word32] = d2_129
	word32 d1_274 = __swap(10) *u (word16) d5_248
	word32 d0_281 = (word16) d5_248 *u 10 + DPB(__swap(DPB(d1_274, (word16) (d1_274 + __swap(d5_248) *u 0x000A), 0)), 0x0000, 0)
	a2_134 = a2_134 + 1
	a0_1417 = 0x000028C5 + (DPB(d0_281, Mem268[a2_134:byte], 0) & 0x000000FF)
	word32 d1_290 = (int32) (int16) Mem268[a2_134:byte]
	word32 d0_302 = (int32) Mem268[a0_1417:byte]
	d2_129 = Mem268[a7_265:word32]
	d1_103 = d1_290 - 0x00000030
	d5_248 = d1_290 - 0x00000030 + d0_281
	d0_156 = d0_302 & 0x00000004
	branch (d0_302 & 0x00000004) != 0x00000000 l00001730
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000016F4:
	d0_156 = d3_1452 + 0x00000003 >>u 0x00000002 << 0x00000002
	word32 v44_318 = Mem240[d0_156:word32]
	Mem320[a7_1575 + 44:word32] = v44_318
	a2_134 = a2_134 + 1
	d3_1452 = d0_156 + 0x00000004
	a0_1417 = d0_156 + 0x00000004
	branch v44_318 < 0x00000000 l00001778
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000170C:
	d5_248 = Mem320[a7_1575 + 44:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001778:
	word32 a7_1435 = a7_1575
	branch Mem326[a2_134:byte] == 0x68 l0000179C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000177E:
	branch Mem326[a2_134:byte] == 0x6C l0000179C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001784:
	branch Mem326[a2_134:byte] == 0x4C l0000179C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000178A:
	branch Mem326[a2_134:byte] == 0x6A l0000179C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001790:
	branch Mem326[a2_134:byte] == 0x7A l0000179C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001796:
	branch Mem326[a2_134:byte] != 0x74 l000017A2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000179C:
	a2_134 = a2_134 + 1
	d4_360 = (int32) (int16) Mem326[a2_134:byte]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000017A2:
	branch d4_360 != 0x00000068 l000017B4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000017AA:
	branch Mem326[a2_134:byte] != 0x68 l000017B4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000017B0:
	d4_360 = 2
	a2_134 = a2_134 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000017B4:
	branch d4_360 != 0x0000006C l000017C6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000017BC:
	branch Mem326[a2_134:byte] != 0x6C l000017C6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000017C2:
	d4_360 = 1
	a2_134 = a2_134 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000017C6:
	branch d4_360 != 0x0000006A l000017D0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000017CE:
	d4_360 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000017D0:
	branch d4_360 != 0x0000007A l000017DA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000017D8:
	d4_360 = 108
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000017DA:
	branch d4_360 != 0x00000074 l000017E4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000017E2:
	d4_360 = 105
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000017E4:
	word32 d5_1451
	byte v84_412 = Mem326[a2_134:byte]
	word32 a2_1862 = a2_134 + 1
	d1 = DPB(d1_103, v84_412, 0)
	word32 d0_1441 = DPB(d0_156, v84_412, 0)
	branch v84_412 == 0x25 l00001C6C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C6C:
	Mem447[a7_1575 + 102:word32] = 0x00000001
	a3 = 0x00001F14
	d5_1451 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000017F0:
	branch v84_412 == 0x58 l0000183E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000017F6:
	branch v84_412 == 0x63 l00001BEC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001BEC:
	branch d4_360 != 0x0000006C l00001C08
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C08:
	d0_1441 = d3_1452 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem492[a3:byte] = Mem326[d0_1441 + 0x00000003:byte]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001BF4:
	d0_1441 = d3_1452 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem503[a3:byte] = Mem326[d0_1441 + 0x00000003:byte]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C1A:
	a0_1417 = (d3_1452 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d3_1452 = (d3_1452 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	Mem507[a7_1575 + 102:word32] = 0x00000001
	d5_1451 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000017FE:
	branch v84_412 == 0x64 l0000183E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001804:
	branch v84_412 == 0x69 l0000183E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000180A:
	Mem517[a7_1575 + 44:byte] = v84_412
	branch v84_412 == 0x6E l00001C7E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C7E:
	branch d4_360 != 0x00000001 l00001CA0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001CA0:
	branch d4_360 != 0x0000006C l00001CBE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001CBE:
	branch d4_360 != 0x00000068 l00001CDC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001CDC:
	branch d4_360 != 0x00000002 l00001CFA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001CFA:
	d0_1441 = d3_1452 + 0x00000003 >>u 0x00000002 << 0x00000002
	a0_1417 = Mem517[d0_1441:word32]
	Mem557[a0_1417:word32] = d6_1450
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001CE4:
	d0_1441 = d3_1452 + 0x00000003 >>u 0x00000002 << 0x00000002
	a0_1417 = Mem517[d0_1441:word32]
	Mem569[a0_1417:byte] = (byte) d6_1450
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001CC6:
	d0_1441 = d3_1452 + 0x00000003 >>u 0x00000002 << 0x00000002
	a0_1417 = Mem517[d0_1441:word32]
	Mem581[a0_1417:word16] = (word16) d6_1450
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001CA8:
	d0_1441 = d3_1452 + 0x00000003 >>u 0x00000002 << 0x00000002
	a0_1417 = Mem517[d0_1441:word32]
	Mem593[a0_1417:word32] = d6_1450
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C86:
	d0_1441 = d3_1452 + 0x00000003 >>u 0x00000002 << 0x00000002
	a0_1417 = Mem517[d0_1441:word32]
	Mem605[a0_1417 + 4:word32] = d6_1450
	Mem606[a0_1417:word32] = 0x00000000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D0E:
	d3_1452 = (d3_1452 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	Mem613[a7_1575 + 64:word32] = 0x00000000
	d5_1451 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001816:
	branch Mem517[a7_1575 + 44:byte] <=u 0x70 l0000183E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001824:
	byte v97_626 = Mem517[a7_1575 + 44:byte]
	branch v97_626 == 0x73 l00001C28
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C28:
	d0_1441 = d3_1452 + 0x00000003 >>u 0x00000002 << 0x00000002
	a3 = Mem517[d0_1441:word32]
	Mem641[a7_1575 + 102:word32] = 0x00000000
	d3_1452 = d0_1441 + 0x00000004
	a0_1417 = d0_1441 + 0x00000004
	a1 = a3
	branch d5_248 == 0x00000000 l00001C4A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C44:
	branch d5_248 - Mem641[a7_1575 + 102:word32] <=u 0x00000000 l00001C66
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C4A:
	branch Mem641[a3:byte] == 0x00 l00001C66
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C4E:
	d0_1441 = Mem641[a7_1575 + 102:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C52:
	d0_1441 = d0_1441 + 0x00000001
	a1 = a1 + 1
	branch d5_248 <=u 0x00000000 l00001C5E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C5A:
	branch d5_248 - d0_1441 <=u 0x00000000 l00001C62
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C5E:
	branch Mem641[a1:byte] != 0x00 l00001C52
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C62:
	Mem699[a7_1575 + 102:word32] = d0_1441
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001C66:
	d5_1451 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001830:
	branch v97_626 == 0x75 l0000183E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001836:
	branch v97_626 != 0x78 l00001D16
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D16:
	branch v84_412 != 0x00 l00001D1C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D1A:
	a2_1862 = a2_1862 - 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D1C:
	d0_1441 = a2_1862 - a4_1895
	Mem736[a7_1575 + 102:word32] = d0_1441
	Mem738[a7_1575 + 64:word32] = 0x00000000
	a3 = a4_1895
	d5_1451 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000183E:
	branch v84_412 != 0x70 l00001850
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001844:
	Mem752[a7_1575 + 72:word32] = Mem750[a7_1575 + 72:word32] | 0x00000001
	d4_360 = 108
	d1 = 120
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001850:
	word32 d3_1026
	word32 a7_1172
	branch (byte) d1 == 0x64 l0000185E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001856:
	branch (byte) d1 != 0x69 l000019A8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000019A8:
	branch d4_360 != 0x00000001 l000019CC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000019CC:
	branch d4_360 != 0x0000006C l000019EE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000019EE:
	word32 d0_776 = d3_1452 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem784[a7_1575 + 60:word32] = Mem781[d0_776:word32]
	Mem785[a7_1575 + 56:word32] = 0x00000000
	d3_1026 = d0_776 + 0x00000004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000019D4:
	word32 d0_793 = d3_1452 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem799[a7_1575 + 60:word32] = Mem781[d0_793:word32]
	Mem800[a7_1575 + 56:word32] = 0x00000000
	d3_1026 = d0_793 + 0x00000004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000019B0:
	word32 d0_808 = d3_1452 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem814[a7_1575 + 60:word32] = Mem781[d0_808 + 0x00000004:word32]
	Mem816[a7_1575 + 56:word32] = Mem814[d0_808:word32]
	d3_1026 = d0_808 + 0x00000008
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001A06:
	branch d4_360 != 0x00000068 l00001A22
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001A0E:
	word16 v231_824 = Mem823[a7_1575 + 62:word16]
	word32 a7_827 = a7_1575 - 4
	Mem830[a7_827:word32] = d1
	Mem835[a7_827 + 64:word32] = (int32) v231_824
	Mem836[a7_827 + 60:word32] = 0x00000000
	d1 = Mem836[a7_827:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001A22:
	branch d4_360 != 0x00000002 l00001A3E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001A2A:
	byte v244_847 = Mem846[a7_1575 + 63:byte]
	word32 a7_850 = a7_1575 - 4
	Mem853[a7_850:word32] = d1
	Mem858[a7_850 + 64:word32] = (int32) v244_847
	Mem859[a7_850 + 60:word32] = 0x00000000
	d1 = Mem859[a7_850:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001A3E:
	word32 d0_867 = Mem866[a7_1575 + 72:word32] & 1
	Mem870[a7_1575 + 44:byte] = (byte) d1
	a7_1172 = a7_1575
	branch d0_867 == 0x00000000 l00001ADC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001A4E:
	branch (byte) d1 != 0x6F l00001A8A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001A54:
	branch d5_248 != 0x00000000 l00001A7E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001A58:
	word32 a7_887 = a7_1575 - 4
	Mem889[a7_887:word32] = d0_867
	Mem892[a7_887 - 4:word32] = d1
	word32 d0_893 = Mem892[a7_887 + 64:word32]
	word32 d1_894 = Mem892[a7_887 + 60:word32]
	Mem911[a7_887 - 8:word32] = d2_129
	d2_129 = Mem911[a7_887 - 8:word32]
	d1 = Mem911[a7_887 - 4:word32]
	d0_867 = Mem911[a7_887:word32]
	branch d1_894 - (d0_893 <u 0x00000000) == 0x00000000 l00001A8A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001A7E:
	Mem951[a7_1575 + 106:byte] = 0x30
	d7_1000 = 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001A8A:
	a7_1172 = a7_1575
	branch (byte) d1 == 0x78 l00001A9A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001A90:
	Mem960[a7_1575 + 44:byte] = (byte) d1
	branch (byte) d1 != 0x58 l00001ADC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001A9A:
	Mem967[a7_1575 + 44:byte] = (byte) d1
	word32 a7_968 = a7_1575 - 4
	Mem973[a7_968:word32] = d0_867
	Mem976[a7_968 - 4:word32] = d1
	word32 d0_977 = Mem976[a7_968 + 64:word32]
	word32 d1_978 = Mem976[a7_968 + 60:word32]
	Mem984[a7_968 - 8:word32] = d2_129
	word32 d1_993 = Mem984[a7_968 - 4:word32]
	a7_1172 = a7_968 + 4
	branch d1_978 - (d0_977 <u 0x00000000) == 0x00000000 l00001ADC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001AC4:
	Mem1004[a7_968 + 110 + d7_1000:byte] = 0x30
	word32 d7_1002 = d7_1000 + 0x00000001
	Mem1009[a7_968 + 110 + d7_1002:byte] = (byte) d1_993
	Mem1011[a7_968 + 48:byte] = (byte) d1_993
	d7_1000 = d7_1002 + 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000185E:
	word32 d0_1038
	branch d4_360 != 0x00000001 l00001884
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001884:
	branch d4_360 != 0x0000006C l000018B0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000018B0:
	word32 d0_1024 = d3_1452 + 0x00000003 >>u 0x00000002 << 0x00000002
	word32 d0_1029 = Mem781[d0_1024:word32]
	Mem1032[a7_1575 + 52:word32] = d0_1029
	word32 a7_1033 = a7_1575 - 4
	Mem1036[a7_1033:word32] = d1
	Mem1041[a7_1033 + 52:word32] = d0_1029 >> 31
	word32 v208_1042 = Mem1041[a7_1033:word32]
	d3_1026 = d0_1024 + 0x00000004
	d0_1038 = d0_1029 >> 31
	d1 = v208_1042
	branch d4_360 != 0x00000068 l000018F6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000018DA:
	word16 v210_1048 = Mem1041[a7_1033 + 58:word16]
	Mem1052[a7_1033:word32] = v208_1042
	word32 d1_1055 = (int32) v210_1048
	Mem1057[a7_1033 + 56:word32] = d1_1055
	Mem1060[a7_1033 - 4:word32] = DPB(d0_1029 >> 31, v210_1048, 0)
	Mem1065[a7_1033 + 52:word32] = d1_1055 >> 31
	d1 = Mem1065[a7_1033 - 4:word32]
	d0_1038 = Mem1065[a7_1033:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000018F6:
	branch d4_360 != 0x00000002 l0000191C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000018FE:
	byte v219_1079 = Mem1078[a7_1575 + 55:byte]
	word32 a7_1082 = a7_1575 - 4
	Mem1085[a7_1082:word32] = d1
	word32 d1_1089 = (int32) (int16) v219_1079
	Mem1091[a7_1082 + 56:word32] = d1_1089
	Mem1094[a7_1082 - 4:word32] = DPB(d0_1038, v219_1079, 0)
	Mem1099[a7_1082 + 52:word32] = d1_1089 >> 31
	d1 = Mem1099[a7_1082 - 4:word32]
	d0_1038 = Mem1099[a7_1082:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000188C:
	word32 d0_1110 = d3_1452 + 0x00000003 >>u 0x00000002 << 0x00000002
	word32 d0_1114 = Mem781[d0_1110:word32]
	Mem1116[a7_1575 + 52:word32] = d0_1114
	word32 a7_1117 = a7_1575 - 4
	Mem1119[a7_1117:word32] = d1
	Mem1124[a7_1117 + 52:word32] = d0_1114 >> 31
	d3_1026 = d0_1110 + 0x00000004
	d0_1038 = d0_1114 >> 31
	d1 = Mem1124[a7_1117:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001866:
	d0_1038 = d3_1452 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem1138[a7_1575 + 52:word32] = Mem781[d0_1038 + 0x00000004:word32]
	Mem1140[a7_1575 + 48:word32] = Mem1138[d0_1038:word32]
	d3_1026 = d0_1038 + 0x00000008
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000191C:
	Mem1145[a7_1575 + 44:byte] = (byte) d1
	word32 a7_1146 = a7_1575 - 4
	Mem1149[a7_1146:word32] = d0_1038
	Mem1152[a7_1146 - 4:word32] = d1
	word32 d0_1153 = Mem1152[a7_1146 + 56:word32]
	word32 d1_1154 = Mem1152[a7_1146 + 52:word32]
	Mem1160[a7_1146 - 8:word32] = d2_129
	a7_1172 = a7_1146 + 4
	branch d1_1154 - (d0_1153 <u 0x00000000) >= 0x00000000 l00001966
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001966:
	byte v142_1174 = Mem1160[a7_1146 + 48:byte]
	branch (Mem1160[a7_1146 + 76:word32] & 16) == 0x00000000 l00001980
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001980:
	branch (Mem1160[a7_1146 + 76:word32] & 8) == 0x00000000 l00001994
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001988:
	Mem1196[a7_1146 + 110:byte] = 0x20
	d7_1000 = 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001972:
	Mem1203[a7_1146 + 110:byte] = 0x2B
	d7_1000 = 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001994:
	Mem1208[a7_1146 + 64:word32] = Mem1206[a7_1146 + 56:word32]
	Mem1210[a7_1146 + 60:word32] = Mem1208[a7_1146 + 52:word32]
	Mem1213[a7_1146 + 48:byte] = v142_1174
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001946:
	Mem1219[a7_1146 + 110:byte] = 0x2D
	d7_1000 = 0x00000001
	a7_1172 = Mem1219[a7_1146 + 0x00000040:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001ADC:
	byte v131_1237 = Mem1236[a7_1172 + 44:byte]
	a3 = a7_1172 + 98
	branch v131_1237 == 0x78 l00001AF0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001AEA:
	branch v131_1237 != 0x58 l00001AFA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001AFA:
	branch v131_1237 != 0x6F l00001B0A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B0A:
	Mem1251[a7_1172 + 48:word32] = 0x0000000A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B00:
	Mem1254[a7_1172 + 48:word32] = 0x00000008
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B12:
	Mem1259[a7_1172 + 44:word32] = Mem1257[a7_1172 + 48:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001AF0:
	Mem1263[a7_1172 + 44:word32] = 0x00000010
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B18:
	word32 a6_1275
	Mem1268[a7_1172 + 108:word32] = Mem1266[a7_1172 + 44:word32]
	branch v131_1237 == 0x58 l00001B2A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B2A:
	a6_1275 = 0x00001F30
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B24:
	a6_1275 = 0x00001F20
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B2E:
	Mem1280[a7_1172 + 44:word32] = a6_1275
	Mem1296[a7_1172 + 124:word32] = d3_1026
	Mem1310[a7_1172 + 68:word32] = d5_248
	Mem1329[a7_1172 + 48:word32] = d6_1450
	Mem1337[a7_1172 + 98:word32] = d7_1000
	word32 v164_1338 = a7_1172 + 56
	word32 d6_1339 = Mem1337[v164_1338:word32]
	word32 d7_1341 = Mem1337[v164_1338 + 4:word32]
	word32 d3_1343 = Mem1337[a7_1172 + 102:word32]
	a1 = Mem1337[a7_1172 + 44:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001B50:
	word32 d1_1348 = Mem1347[a7_1172 + 108:word32]
	word32 a7_1353 = a7_1172 - 4
	Mem1355[a7_1353:word32] = d1_1348 >> 31
	Mem1358[a7_1353 - 4:word32] = d1_1348
	Mem1362[a7_1353 - 8:word32] = a1
	Mem1365[a7_1353 - 12:word32] = d1_1348
	Mem1367[a7_1353 - 16:word32] = d1_1348 >> 31
	Mem1370[a7_1353 - 20:word32] = d7_1341
	Mem1373[a7_1353 - 24:word32] = d6_1339
	word32 d1_1376 = fn000027B0(Mem1373[a7_1353 - 24:word32], Mem1373[a7_1353 - 20:word32], Mem1373[a7_1353 - 16:word32], Mem1373[a7_1353 - 12:word32])
	word32 v168_1384 = Mem1373[a7_1353 - 8:word32]
	word32 d1_1389 = Mem1373[a7_1353 - 4:word32]
	word32 d0_1391 = Mem1373[a7_1353:word32]
	a3 = a3 - 1
	Mem1398[a3:byte] = Mem1373[v168_1384 + d1_1376:byte]
	Mem1401[a7_1353:word32] = d0_1391
	Mem1404[a7_1353 - 4:word32] = d1_1389
	Mem1407[a7_1353 - 8:word32] = v168_1384
	Mem1410[a7_1353 - 12:word32] = d1_1389
	Mem1412[a7_1353 - 16:word32] = d0_1391
	Mem1414[a7_1353 - 20:word32] = d7_1341
	Mem1416[a7_1353 - 24:word32] = d6_1339
	word32 d1_1420
	word32 d0_1419 = fn00002560(Mem1416[a7_1353 - 24:word32], Mem1416[a7_1353 - 20:word32], Mem1416[a7_1353 - 16:word32], Mem1416[a7_1353 - 12:word32], out d1_1420, out a0_1417)
	a1 = Mem1416[a7_1353 - 8:word32]
	d6_1339 = d0_1419
	d7_1341 = d1_1420
	a7_1435 = a7_1353 + 4
	d3_1343 = d3_1343 + 0x00000001
	d0_1441 = d1_1420
	d1 = d0_1419 - (d1_1420 <u 0x00000000)
	branch d1 != 0x00000000 l00001B50
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001BBE:
	Mem1448[a7_1353 + 106:word32] = d3_1343
	d7_1000 = Mem1448[a7_1353 + 102:word32]
	d6_1450 = Mem1448[a7_1353 + 52:word32]
	d5_1451 = Mem1448[a7_1353 + 72:word32]
	d3_1452 = Mem1448[a7_1353 + 128:word32]
	branch d5_1451 != 0xFFFFFFFF l00001BE0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001BE0:
	Mem1457[a7_1353 + 76:word32] = Mem1448[a7_1353 + 76:word32] & 0xFFFFFFFD
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001BDA:
	d5_1451 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D2C:
	branch d5_1451 - Mem1466[a7_1435 + 102:word32] >u 0x00000000 l00001D3A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D3A:
	Mem1472[a7_1435 + 44:word32] = d5_1451
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D32:
	Mem1475[a7_1435 + 44:word32] = Mem1466[a7_1435 + 102:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D3E:
	word32 a7_1478 = a7_1435 - 4
	Mem1486[a7_1478:word32] = d0_1441
	Mem1501[a7_1478 + 52:word32] = Mem1486[a7_1478 + 48:word32] + d7_1000
	Mem1507[a7_1478:word32] = Mem1501[a7_1478:word32]
	word32 d0_1511 = Mem1507[a7_1478:word32]
	branch Mem1507[a7_1478 + 52:word32] - Mem1507[a7_1478 + 68:word32] <u 0x00000000 l00001D62
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D62:
	Mem1516[a7_1478:word32] = d0_1511
	Mem1521[a7_1478 + 48:word32] = Mem1516[a7_1478 + 68:word32] - Mem1516[a7_1478 + 52:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D5C:
	Mem1526[a7_1478 + 48:word32] = 0x00000000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D72:
	Mem1534[a7_1435 + 48:word32] = Mem1532[a7_1435 + 44:word32]
	branch (Mem1534[a7_1435 + 72:word32] & 2) == 0x00000000 l00001DB4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D80:
	word32 d2_1541 = 0
	branch d7_1000 == 0x00000000 l00001DB4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001D86:
	word32 a7_1548 = a7_1435 - 4
	Mem1551[a7_1548:word32] = a5_1549
	Mem1562[a7_1548 - 4:word32] = (int32) (int16) Mem1551[a7_1548 + 110 + d2_1541:byte]
	a7_1575 = a7_1548 + 4
	branch fn00001F40(a3, Mem1562[a7_1548 - 4:word32], Mem1562[a7_1548:word32], out d1, out a0_1417, out a1, out a5_1549) != 0xFFFFFFFF l00001DAC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001DAC:
	d2_1541 = d2_1541 + 0x00000001
	d6_1450 = d6_1450 + 0x00000001
	branch d7_1000 - d2_1541 >u 0x00000000 l00001D86
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001DB4:
	branch (Mem1589[a7_1435 + 72:word32] & 4) != 0x00000000 l00001E06
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001DBC:
	word32 d2_1595 = 0
	branch Mem1589[a7_1435 + 48:word32] == 0x00000000 l00001E06
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001DC4:
	word32 d4_1600 = Mem1589[a7_1435 + 72:word32]
	word32 a4_1602 = Mem1589[a7_1435 + 48:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001DCC:
	word32 a0_1616
	word32 a7_1604 = a7_1435 - 4
	Mem1607[a7_1604:word32] = a5_1549
	branch (d4_1600 & 2) == 0x00000000 l00001DDA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001DDA:
	a0_1616 = DPB(a0_1417, 0x0020, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001DD4:
	a0_1616 = DPB(a0_1417, 0x0030, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001DDE:
	Mem1622[a7_1435 - 8:word32] = a0_1616
	a7_1575 = a7_1435
	branch fn00001F40(a3, Mem1622[a7_1435 - 8:word32], Mem1622[a7_1435 - 4:word32], out d1, out a0_1417, out a1, out a5_1549) != 0xFFFFFFFF l00001DF6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001DF6:
	d2_1595 = d2_1595 + 0x00000001
	d6_1450 = d6_1450 + 0x00000001
	branch a4_1602 - d2_1595 >u 0x00000000 l00001DCC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001DFE:
	Mem1653[a7_1604 + 52:word32] = a4_1602
	Mem1656[a7_1604 + 76:word32] = d4_1600
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E06:
	branch (Mem1660[a7_1435 + 72:word32] & 2) != 0x00000000 l00001E42
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E0E:
	word32 d2_1666 = 0
	branch d7_1000 == 0x00000000 l00001E42
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E14:
	word32 a7_1676 = a7_1435 - 4
	Mem1679[a7_1676:word32] = a5_1549
	Mem1690[a7_1676 - 4:word32] = (int32) (int16) Mem1679[a7_1676 + 110 + d2_1666:byte]
	a7_1575 = a7_1676 + 4
	branch fn00001F40(a3, Mem1690[a7_1676 - 4:word32], Mem1690[a7_1676:word32], out d1, out a0_2231, out a1, out a5_1549) != 0xFFFFFFFF l00001E3A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E3A:
	d2_1666 = d2_1666 + 0x00000001
	d6_1450 = d6_1450 + 0x00000001
	branch d7_1000 - d2_1666 >u 0x00000000 l00001E14
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E42:
	word32 d2_1717 = Mem1716[a7_1435 + 102:word32]
	branch d5_1451 - Mem1716[a7_1435 + 102:word32] <=u 0x00000000 l00001E70
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E4C:
	word32 a7_1731 = a7_1435 - 4
	Mem1734[a7_1731:word32] = a5_1549
	Mem1737[a7_1731 - 0x00000004:word32] = 0x00000030
	a7_1575 = a7_1731 + 0x00000004
	branch fn00001F40(a3, Mem1737[a7_1731 - 0x00000004:word32], Mem1737[a7_1731:word32], out d1, out a0_2232, out a1, out a5_1549) != 0xFFFFFFFF l00001E68
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E68:
	d2_1717 = d2_1717 + 0x00000001
	d6_1450 = d6_1450 + 0x00000001
	branch d5_1451 - d2_1717 >u 0x00000000 l00001E4C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E70:
	word32 d2_1762 = 0
	branch Mem1764[a7_1435 + 102:word32] == 0x00000000 l00001EA6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E78:
	word32 a4_1769 = Mem1764[a7_1435 + 102:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E7C:
	word32 a7_1771 = a7_1435 - 4
	Mem1774[a7_1771:word32] = a5_1549
	Mem1785[a7_1771 - 4:word32] = (int32) (int16) Mem1774[a3 + d2_1762:byte]
	a7_1575 = a7_1771 + 4
	branch fn00001F40(a3, Mem1785[a7_1771 - 4:word32], Mem1785[a7_1771:word32], out d1, out a0_2233, out a1, out a5_1549) != 0xFFFFFFFF l00001E9E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E9E:
	d2_1762 = d2_1762 + 0x00000001
	d6_1450 = d6_1450 + 0x00000001
	branch a4_1769 - d2_1762 >u 0x00000000 l00001E7C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001EA6:
	d0 = Mem1811[a7_1435 + 72:word32] & 4
	branch d0 == 0x00000000 l00001EDC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001EAE:
	word32 d2_1817 = 0
	branch Mem1811[a7_1435 + 48:word32] == 0x00000000 l00001EDC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001EB6:
	a3 = Mem1811[a7_1435 + 48:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001EBA:
	word32 a7_1824 = a7_1435 - 4
	Mem1827[a7_1824:word32] = a5_1549
	Mem1830[a7_1824 - 0x00000004:word32] = 0x00000020
	d0 = fn00001F40(a3, Mem1830[a7_1824 - 0x00000004:word32], Mem1830[a7_1824:word32], out d1, out a0_2234, out a1, out a5_1549)
	a7_1575 = a7_1824 + 0x00000004
	branch d0 != 0xFFFFFFFF l00001ED4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001ED4:
	d2_1817 = d2_1817 + 0x00000001
	d6_1450 = d6_1450 + 0x00000001
	branch a3 - d2_1817 >u 0x00000000 l00001EBA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001EDC:
	a7_1575 = a7_1435
	a4_1895 = a2_1862
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F00:
	branch Mem1897[a4_1895:byte] != 0x00 l000015DC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F06:
	d0_1922 = d6_1450
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001ED0:
	d0_1922 = d6_1450
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E9A:
	d0_1922 = d6_1450
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E62:
	d0_1922 = d6_1450
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001E34:
	d0_1922 = d6_1450
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001DF0:
	d0_1922 = d6_1450
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001DA6:
	d0_1922 = d6_1450
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F08:
	word32 a7_1943 = a7_1575 + 4
	word32 a2_1954 = Mem1940[a7_1943 + 20:word32]
	word32 a3_1956 = Mem1940[a7_1943 + 24:word32]
	word32 a5_1960 = Mem1940[a7_1943 + 32:word32]
	d1Out = d1
	a1Out = a1
	a2Out = a2_1954
	a3Out = a3_1956
	a5Out = a5_1960
	return d0_1922
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn000015C0_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00001F40(word32 a3, word32 dwArg04, word32 dwArg08, ptr32 & d1Out, ptr32 & a0Out, ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a3:[0..31] Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: a0 a1 a5 d0 d1
// Trashed: CVZNX a0 a1 a5 d0 d1
// Preserved: a2 a3 a7 d2
fn00001F40_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F40:
	word32 a1_104
	word32 a0_103
	word32 d1_54
	Mem17[dwArg08 + 24:word32] = Mem11[dwArg08 + 24:word32] | 2
	word32 v13_19 = Mem17[dwArg08 + 20:word32] - 0x00000001
	Mem20[dwArg08 + 20:word32] = v13_19
	branch v13_19 < 0x00000000 l00001F84
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F5C:
	branch dwArg04 != 10 l00001F6E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F62:
	branch (Mem20[dwArg08 + 24:word32] & 0x00000080) != 0x00000000 l00001F84
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F84:
	d1_54 = fn00001F9C(dwArg04, a3, dwArg04, dwArg08, out a0_103, out a1_104, out a5)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F6E:
	a0_103 = Mem20[dwArg08 + 4:word32]
	Mem64[dwArg08 + 4:word32] = a0_103 + 1
	Mem67[a0_103:byte] = (byte) dwArg04
	a1_104 = dwArg08 + 4
	d1_54 = (int32) Mem67[a0_103:byte]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F92:
	d1Out = d1_54
	a0Out = a0_103
	a1Out = a1_104
	a5Out = a5
	return d1_54
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001F40_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00001F9C(word32 d2, word32 a3, word32 dwArg04, word32 dwArg08, ptr32 & a0Out, ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a3:[0..31] d2:[0..31] Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: a0 a1 a5 d0
// Trashed: CVZNX a0 a1 a5 d0 d1
// Preserved: a2 a3 a4 a6 a7 d2 d3 d4 d5 d6
fn00001F9C_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001F9C:
	word32 d0_109
	word32 a5_129
	word32 a1_127
	fn00002530(d2, dwArg08, a3, out a1_127, out a5_129)
	branch dwArg08 != 0x00000000 l00001FB8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001FB8:
	branch (Mem29[dwArg08 + 24:word32] & 73) == 64 l00001FCA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001FCA:
	branch Mem29[dwArg08 + 28:word32] != 0x00000000 l00001FE8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001FD0:
	branch (Mem29[dwArg08 + 24:word32] & 4) == 0x00000000 l00001FE0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001FE0:
	Mem62[dwArg08 + 28:word32] = 0x00000400
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001FD8:
	Mem66[dwArg08 + 28:word32] = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001FE8:
	branch Mem69[dwArg08 + 8:word32] != 0x00000000 l00002028
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002028:
	branch Mem69[dwArg08:word32] == 0x00000000 l00002082
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002082:
	d0_109 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000202C:
	word32 d0_101 = Mem69[dwArg08 + 24:word32] & 0x00000080
	branch d0_101 == 0x00000000 l00002058
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002038:
	d0_101 = 10
	branch dwArg04 != 10 l00002058
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002058:
	word32 d4_95 = Mem69[dwArg08 + 4:word32] - Mem69[dwArg08 + 8:word32]
	execPrivate3()
	branch d4_95 - d0_101 == 0x00000000 l00002086
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002076:
	Mem108[dwArg08 + 24:word32] = Mem69[dwArg08 + 24:word32] | 16
	a0 = dwArg08 + 24
	d0_109 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000203E:
	word32 a0_112 = Mem69[dwArg08 + 4:word32]
	Mem116[dwArg08 + 4:word32] = a0_112 + 1
	Mem118[a0_112:byte] = (byte) dwArg04
	d0_109 = fn000020B0(d2, a3, dwArg08, out a0, out a1_127, out a5_129)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001FEE:
	word32 d4_145
	branch (Mem69[dwArg08 + 24:word32] & 0x00000080) == 0x00000000 l00002002
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002002:
	d4_145 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001FFE:
	d4_145 = 2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002004:
	word32 d0_162 = fn0000215C(d4_145 + Mem69[dwArg08 + 28:word32], out d1_163, out a0, out a1_127)
	branch d0_162 != 0x00000000 l0000201E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000201E:
	Mem176[dwArg08 + 8:word32] = d0_162 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002086:
	Mem183[dwArg08 + 24:word32] = Mem181[dwArg08 + 24:word32] | 2
	a0 = Mem183[dwArg08 + 8:word32]
	Mem190[a0:byte] = (byte) dwArg04
	word32 a1_191 = Mem190[dwArg08 + 8:word32]
	Mem194[dwArg08 + 4:word32] = a1_191 + 1
	Mem199[dwArg08 + 20:word32] = Mem194[dwArg08 + 28:word32] - 0x00000001
	a1_127 = a1_191 + 1
	d0_109 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002018:
	d0_109 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001FC4:
	d0_109 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00001FB2:
	d0_109 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000020AA:
	a0Out = a0
	a1Out = a1_127
	a5Out = a5_129
	return d0_109
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00001F9C_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn000020B0(word32 d2, word32 a3, word32 dwArg04, ptr32 & a0Out, ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a3:[0..31] d2:[0..31] Stack +0004:[0..31]
// LiveOut: a0 a1 a5 d0
// Trashed: CVZNX a0 a1 a4 a5 d0 d1
// Preserved: a2 a6 a7 d2 d3 d4
fn000020B0_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000020B0:
	word32 d0_154
	word32 a1_22
	word32 a5_24
	fn00002530(d2, dwArg04, a3, out a1_22, out a5_24)
	branch dwArg04 != 0x00000000 l000020C6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000020C6:
	branch Mem17[dwArg04 + 28:word32] != 0x00000000 l000020E4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000020CC:
	branch (Mem17[dwArg04 + 24:word32] & 4) == 0x00000000 l000020DC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000020DC:
	Mem43[dwArg04 + 28:word32] = 0x00000400
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000020D4:
	Mem47[dwArg04 + 28:word32] = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000020E4:
	branch Mem50[dwArg04 + 8:word32] != 0x00000000 l000020EE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000020EE:
	word32 d0_56 = Mem50[dwArg04 + 24:word32] & 2
	branch d0_56 == 0x00000000 l00002134
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000020F6:
	branch Mem50[dwArg04:word32] == 0x00000000 l00002124
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002124:
	d0_154 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000020FA:
	word32 d4_69 = Mem50[dwArg04 + 4:word32] - Mem50[dwArg04 + 8:word32]
	execPrivate3()
	branch d4_69 - d0_56 == 0x00000000 l00002128
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002128:
	Mem79[dwArg04 + 4:word32] = Mem50[dwArg04 + 8:word32]
	Mem81[dwArg04 + 20:word32] = Mem79[dwArg04 + 28:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002134:
	Mem88[dwArg04 + 24:word32] = Mem86[dwArg04 + 24:word32] & -4
	a0 = dwArg04 + 24
	d0_154 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002118:
	Mem94[dwArg04 + 24:word32] = Mem50[dwArg04 + 24:word32] | 16
	a0 = dwArg04 + 24
	d0_154 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000020EA:
	d0_154 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000020C2:
	d0_154 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000213E:
	a0Out = a0
	a1Out = a1_22
	a5Out = a5_24
	return d0_154
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn000020B0_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn0000215C(word32 dwArg04, ptr32 & d1Out, ptr32 & a0Out, ptr32 & a1Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31]
// LiveOut: a0 a1 d0 d1
// Trashed: CVZN a0 a1 d0 d1
// Preserved: X a7 d2
fn0000215C_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000215C:
	word32 d0_106
	branch dwArg04 != 0x00000000 l0000216A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000216A:
	branch Mem5[0x00003E58:word32] != 0x00000000 l0000218E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002172:
	word32 a0_13 = Mem5[0x00003E54:word32]
	Mem21[0x00000000:word32] = 0x00000000
	Mem36[0x00003E58:word32] = fn00002450(dwLoc10, a0_13, a0_13, out d1, out a0, out a1)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000218E:
	branch Mem39[0x00003E58:word32] != 0x00000000 l0000219A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000219A:
	word32 d0_58 = fn0000232C(Mem51[0x00003E58:word32], dwArg04 + 4, out d1, out a0)
	a1 = d0_58
	branch d0_58 != 0x00000000 l000021B8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000021B8:
	Mem72[d0_58:word32] = dwArg04
	a0 = d0_58 + 4
	d0_106 = d0_58 + 4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000021B4:
	d0_106 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002196:
	d0_106 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002166:
	d0_106 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000021C0:
	d1Out = d1
	a0Out = a0
	a1Out = a1
	return d0_106
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000215C_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn000021C8(word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31]
// LiveOut:
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a7
fn000021C8_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000021C8:
	branch dwArg04 == 0x00000000 l000021F2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000021D2:
	branch Mem0[0x00003E58:word32] == 0x00000000 l000021F2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000021DA:
	fn00002290(Mem23[0x00003E58:word32], dwArg04 - 4, Mem0[dwArg04 - 4:word32] + 4)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000021F2:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn000021C8_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn00002290(word32 dwArg04, word32 dwArg08, word32 dwArg0C)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut:
// Trashed: CVZN a0 a1 d0 d1
// Preserved: a2 a3 a4 a5 a6 a7 d2
fn00002290_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002290:
	branch Mem20[Mem20[0x00003E24:word32] + 20:word16] <u 0x0027 l000022C0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000022C0:
	branch dwArg04 == 0x00000000 l00002324
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000022C4:
	branch dwArg08 == 0x00000000 l00002324
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000022C8:
	word32 a3_36 = dwArg08 + -12
	branch dwArg0C - Mem20[dwArg04 + 20:word32] >=u 0x00000000 l0000230A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000022D4:
	word32 a2_40 = dwArg04
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000022D6:
	a2_40 = Mem20[a2_40:word32]
	branch Mem20[a2_40:word32] == 0x00000000 l00002324
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000022DC:
	branch Mem20[a2_40 + 8:byte] == 0x00 l000022D6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000022E2:
	branch dwArg08 - Mem20[a2_40 + 20:word32] <u 0x00000000 l000022D6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000022E8:
	branch dwArg08 - Mem20[a2_40 + 24:word32] >=u 0x00000000 l000022D6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000022EE:
	Deallocate(a2_40, dwArg08, dwArg0C)
	branch Mem20[a2_40 + 28:word32] - Mem20[dwArg04 + 16:word32] != 0x00000000 l00002324
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002308:
	a3_36 = a2_40
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000230A:
	Remove(a3_36)
	word32 a3_74 = a3_36 - 4
	FreeMem(a3_74, Mem20[a3_74:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000022AE:
	FreePooled(dwArg08, dwArg04)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002324:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002290_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn0000232C(word32 dwArg04, word32 dwArg08, ptr32 & d1Out, ptr32 & a0Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31]
// LiveOut: a0 d0 d1
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a2 a3 a4 a5 a6 a7 d2 d3 d4
fn0000232C_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000232C:
	word32 d0_159
	word32 a0_116 = Mem26[0x00003E24:word32]
	branch Mem26[a0_116 + 20:word16] <u 0x0027 l00002358
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002358:
	word32 a3_121 = 0x00000000
	branch dwArg04 == 0x00000000 l00002448
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002360:
	branch dwArg08 == 0x00000000 l00002448
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002366:
	branch dwArg08 - Mem26[dwArg04 + 20:word32] >=u 0x00000000 l0000241A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000241A:
	d1 = Mem26[dwArg04 + 12:word32]
	word32 d0_51 = AllocMem(dwArg08 + 16, d1)
	a3_121 = d0_51
	branch d0_51 == 0x00000000 l00002448
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002434:
	Mem57[d0_51:word32] = dwArg08 + 16
	AddTail(dwArg04, d0_51 + 4)
	Mem63[d0_51 + 12:word32] = 0x00000000
	a0_116 = dwArg04
	a3_121 = d0_51 + 16
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000236E:
	word32 a5_163 = Mem26[dwArg04:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002370:
	branch Mem26[a5_163:word32] == 0x00000000 l00002392
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002392:
	word32 d3_78 = Mem26[dwArg04 + 16:word32] + 40
	d1 = Mem26[dwArg04 + 12:word32]
	word32 d0_83 = AllocMem(d3_78, d1)
	a3_121 = d0_83
	branch d0_83 == 0x00000000 l00002448
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000023B0:
	Mem89[d0_83:word32] = d3_78
	Mem92[d0_83 + 12:byte] = 0x0A
	Mem96[d0_83 + 20:word32] = d0_83 + 40
	Mem98[d0_83 + 24:word32] = d0_83 + 40
	Mem100[Mem98[d0_83 + 20:word32]:word32] = 0x00000000
	word32 a2_101 = Mem100[d0_83 + 20:word32]
	Mem104[a2_101 + 4:word32] = Mem100[dwArg04 + 16:word32]
	Mem107[d0_83 + 32:word32] = Mem104[a2_101 + 4:word32]
	Mem111[d0_83 + 28:word32] = Mem107[d0_83 + 32:word32] + Mem107[d0_83 + 20:word32]
	AddHead(dwArg04, d0_83 + 4)
	a0_116 = d0_83 + 4
	a3_121 = Allocate(d0_83 + 4, dwArg08)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002374:
	branch Mem26[a5_163 + 8:byte] == 0x00 l0000238E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000237A:
	word32 d0_129 = Allocate(a5_163, dwArg08)
	a0_116 = a5_163
	a3_121 = d0_129
	branch d0_129 != 0x00000000 l000023FE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000023FE:
	branch (Mem136[dwArg04 + 12:word32] & 0x00010000) == 0x00000000 l00002448
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000240A:
	word32 a2_143 = a3_121
	word32 d2_146 = dwArg08 + 0x00000007 >>u 0x00000003
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002410:
	Mem149[a2_143:word32] = 0x00000000
	word32 a2_150 = a2_143 + 4
	Mem151[a2_150:word32] = 0x00000000
	a2_143 = a2_150 + 4
	d2_146 = d2_146 - 0x00000001
	branch d2_146 != 0x00000000 l00002410
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002418:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002448:
	d0_159 = a3_121
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000238E:
	a5_163 = Mem26[a5_163:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002346:
	a0_116 = dwArg04
	d0_159 = AllocPooled(dwArg08, dwArg04)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000244A:
	d1Out = d1
	a0Out = a0_116
	return d0_159
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn0000232C_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00002450(word32 dwArg04, word32 dwArg08, word32 dwArg0C, ptr32 & d1Out, ptr32 & a0Out, ptr32 & a1Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: a0 a1 d0 d1
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a2 a6 a7 d2 d3
fn00002450_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002450:
	word32 d0_52
	word32 a0_17 = Mem14[0x00003E24:word32]
	branch Mem14[a0_17 + 20:word16] <u 0x0027 l0000247E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000247E:
	a1 = 0x00000000
	branch dwArg08 - dwArg0C <u 0x00000000 l000024B8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002484:
	word32 d0_31 = AllocMem(24, 0)
	d1 = 0
	a1 = d0_31
	branch d0_31 == 0x00000000 l000024B8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000249A:
	Mem38[d0_31:word32] = d0_31 + 4
	Mem39[d0_31 + 4:word32] = 0x00000000
	Mem41[d0_31 + 8:word32] = d0_31
	Mem43[d0_31 + 12:word32] = dwArg04
	Mem47[d0_31 + 16:word32] = dwArg08 + 0x00000007 & -8
	Mem49[d0_31 + 20:word32] = dwArg0C
	a0_17 = d0_31 + 4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000024B8:
	d0_52 = a1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000246A:
	d1 = dwArg08
	d0_52 = CreatePrivatePool(dwArg04, dwArg08, dwArg0C)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000024BA:
	d1Out = d1
	a0Out = a0_17
	a1Out = a1
	return d0_52
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002450_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn000024C0(word32 d0, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d0:[0..31] Stack +0004:[0..31]
// LiveOut:
// Trashed: CVZN a0 a1 d0 d1
// Preserved: a2 a6 a7 d2
fn000024C0_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000024C0:
	branch Mem11[Mem11[0x00003E24:word32] + 20:word16] <u 0x0027 l000024E4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000024E4:
	branch dwArg04 == 0x00000000 l00002528
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000024E8:
	RemHead(dwArg04)
	word32 a2_24 = d0
	branch d0 == 0x00000000 l0000251A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000024FA:
	word32 a2_29 = a2_24 - 4
	word32 d0_31 = Mem11[a2_29:word32]
	FreeMem(a2_29, d0_31)
	RemHead(dwArg04)
	a2_24 = d0_31
	branch d0_31 != 0x00000000 l000024FA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000251A:
	FreeMem(dwArg04, 24)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000024D6:
	DeletePrivatePool(dwArg04)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002528:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn000024C0_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00002530(word32 d2, word32 a2, word32 a3, ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a2:[0..31] a3:[0..31] d2:[0..31]
// LiveOut: a1 a5 d1
// Trashed: CVZN a1 a4 a5 d0 d1
// Preserved: a6 a7
fn00002530_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002530:
	SetSignal(0, 0x00001000)
	word32 d1_24 = 0x00001000
	branch 0x00000000 == 0x00000000 l0000255A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000254E:
	d1_24 = fn0000131C(d2, a2, a3, 0x00000014, out a1, out a5)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000255A:
	a1Out = a1
	a5Out = a5
	return d1_24
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002530_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00002560(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10, ptr32 & d1Out, ptr32 & a0Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31]
// LiveOut: a0 d0 d1
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a7 d2 d3 d4 d5 d6
fn00002560_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002560:
	word32 d0_188
	word32 d1_133 = dwArg08
	word32 a0_20 = dwArg08
	word32 d3_158 = dwArg10
	branch dwArg0C != 0x00000000 l000025B6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000025B6:
	branch dwArg04 - dwArg0C >=u 0x00000000 l000025C0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000025C0:
	word32 d4_29 = 24
	word32 d6_30 = __rol(dwArg0C, 0x00000008)
	branch (byte) d6_30 != 0x00 l000025DE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000025CA:
	d4_29 = 16
	d6_30 = __rol(d6_30, 0x00000008)
	branch (byte) d6_30 != 0x00 l000025DE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000025D2:
	d4_29 = 8
	d6_30 = __rol(d6_30, 0x00000008)
	branch (byte) d6_30 != 0x00 l000025DE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000025DA:
	d4_29 = 0
	d6_30 = DPB(d6_30, (byte) dwArg0C, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000025DE:
	word32 d4_58 = DPB(d4_29, (byte) d4_29 + Mem17[0x00003E5C + (int32) ((word16) d6_30 & 0x00FF):byte], 0)
	word32 d5_60 = 32 - d4_58
	branch d5_60 != 0x00000000 l000025FE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000025FE:
	word32 d1_83
	word32 d0_82 = fn00002664(dwArg04 >>u d4_58, dwArg04 << d5_60 | dwArg08 >>u d4_58, dwArg0C << d5_60 | dwArg10 >>u d4_58, out d1_83, out d2_314)
	word32 d3_69 = dwArg10 << d5_60
	word32 d5_98 = __swap(d0_82)
	word32 d6_100 = __swap(d3_69)
	word32 d3_99 = d3_69 *u (word16) d5_98
	word32 d2_104 = __swap(d0_82 *u (word16) d3_69)
	word16 v31_105 = (word16) (d2_104 + d3_99)
	word32 d4_101 = d0_82 *u (word16) d6_100
	word16 v34_111 = (word16) (DPB(d2_104, v31_105, 0) + d4_101)
	word32 d6_79 = dwArg08 << d5_60
	word32 d2_117 = __swap(DPB(d2_104, v34_111, 0))
	word32 d5_102 = d5_98 *u (word16) d6_100
	a0_20 = d6_79
	d1_133 = d0_82
	word32 v39_125 = d1_83 - ((__swap(DPB(d3_99, 0x0000, 0)) + __swap(DPB(d4_101, 0x0000, 0))) + DPB(d5_102, ((word16) d5_102 + (v31_105 <u 0x0000)) + (v34_111 <u 0x0000), 0))
	branch v39_125 <u 0x00000000 l0000265A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002654:
	branch v39_125 != 0x00000000 l0000265C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002656:
	branch d6_79 - d2_117 >=u 0x00000000 l0000265C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000265A:
	d1_133 = d0_82 - 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000025F2:
	branch dwArg0C - dwArg04 <u 0x00000000 l000025FA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000025F6:
	branch dwArg10 - dwArg08 >u 0x00000000 l000025BA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000025FA:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000025BA:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002578:
	branch dwArg04 - dwArg10 >=u 0x00000000 l0000258A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000258A:
	branch dwArg10 != 0x00000000 l00002596
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000258E:
	d3_158 = (int32) (uint16) (1 /u (uint16) dwArg10)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002596:
	word32 d1_167
	word32 d2_168
	word32 d0_166 = fn00002664(0, dwArg04, d3_158, out d1_167, out d2_168)
	d1_133 = fn00002664(d1_167, dwArg08, d2_168, out d1_312, out d2_313)
	d0_188 = d0_166
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000257C:
	d1_133 = fn00002664(dwArg04, dwArg08, dwArg10, out d1_310, out d2_311)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000265C:
	d0_188 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000265E:
	d1Out = d1_133
	a0Out = a0_20
	return d0_188
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002560_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00002664(word32 d0, word32 d1, word32 d2, ptr32 & d1Out, ptr32 & d2Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d0:[0..31] d1:[0..31] d2:[0..31]
// LiveOut: d0 d1 d2
// Trashed: CVZNX d0 d1 d2
// Preserved: a0 a1 a7 d3 d4 d5 d6 d7
fn00002664_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002664:
	word32 d7_13 = d2
	branch d2 == 0x00000000 l0000267E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000266C:
	word32 d6_17 = d1
	word32 d5_19 = d0
	branch d0 != 0x00000000 l0000268C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000268C:
	word32 d2_22 = __swap(d2)
	branch (word16) d2_22 != 0x0000 l000026B4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026B4:
	byte bLoc26_339 = 0x00
	word32 d0_44 = 0
	branch d2 < 0x00000000 l000026D0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026C6:
	d6_17 = d6_17 * 0x00000002
	d0_44 = DPB(d0_44, (word16) d0_44 + 0x0001, 0)
	d5_19 = d5_19 * 0x00000002 + (d6_17 <u 0x00000000)
	d7_13 = d7_13 * 0x00000002
	branch d7_13 > 0x00000000 l000026C6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026D0:
	word16 v35_63 = (word16) d0_44
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026D2:
	word32 d1_101
	word32 d2_72 = __swap(d5_19)
	word32 d3_73 = __swap(d7_13)
	dwLoc24 = SLICE(dwLoc24, word16, 0) (alias)
	branch (word16) (d2_72 - d3_73) != 0x0000 l000026E4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026E4:
	d1_101 = __swap(DPB(__swap(DPB(DPB(d5_19, (uint16) (d5_19 % (uint16) d3_73), 16), (uint16) (d5_19 /u (uint16) d3_73), 0)), 0x0000, 0))
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026DE:
	d1_101 = 65535
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026EE:
	word32 d6_95 = __swap(DPB(d6_17, 0x0000, 0))
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000026F4:
	word32 d4_110 = __swap(d5_19 - __swap(d7_13) *u (word16) d1_101)
	dwLoc24 = SLICE(dwLoc24, word16, 0) (alias)
	word32 d2_103 = d1_101 *u (word16) d7_13
	word32 d4_116 = DPB(d4_110, (word16) d6_95, 0)
	branch (word16) d4_110 != 0x0000 l00002714
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000270C:
	branch d2_103 - d4_116 <=u 0x00000000 l00002714
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002714:
	word32 d6_128 = __swap(d1_101)
	word32 d3_135 = __swap(d6_128)
	word32 d4_137 = __swap(d7_13)
	word32 d5_136 = d7_13 *u (word16) d3_135
	word32 d6_141 = __swap(d6_128 *u (word16) d7_13)
	word16 v45_142 = (word16) (d6_141 + d5_136)
	word32 d2_138 = d6_128 *u (word16) d4_137
	word16 v47_148 = (word16) (DPB(d6_141, v45_142, 0) + d2_138)
	word32 d3_139 = d3_135 *u (word16) d4_137
	word32 d6_167 = d6_17 - __swap(DPB(d6_141, v47_148, 0))
	word32 d5_170 = d5_19 - ((__swap(DPB(d5_136, 0x0000, 0)) + __swap(DPB(d2_138, 0x0000, 0))) + DPB(d3_139, ((word16) d3_139 + (v45_142 <u 0x0000)) + (v47_148 <u 0x0000), 0)) - (d6_167 <u 0x00000000)
	branch d5_170 >=u 0x00000000 l0000276C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002756:
	d6_167 = d6_167 + DPB(__swap(d7_13), 0x0000, 0)
	d1_101 = d1_101 - 0x00000001
	d5_170 = d5_170 + (d6_167 <u 0x00000000) + __swap(DPB(d7_13, 0x0000, 0))
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000276C:
	branch bLoc26_339 != 0x00 l00002788
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002788:
	word32 d6_205 = __swap(DPB(d6_167, (word16) d5_170, 0))
	d0 = DPB(dwLoc24, (word16) d1_101, 0)
	word32 d5_206 = __swap(d5_170)
	branch v35_63 == 0x0000 l000027A2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002798:
	word32 d7_213 = DPB(d7_13, v35_63 - 0x0001, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000279A:
	d5_206 = d5_206 >>u 0x00000001
	word16 v62_224 = SLICE(d7_213, word16, 0)
	d6_205 = __rcr(d6_205, 0x00000001, SLICE(cond(d5_206), bool, 4))
	d7_213 = DPB(d7_213, v62_224 - 1, 0)
	branch v62_224 != 0x0000 l0000279A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000027A2:
	d1 = d6_205
	d2 = d2_22
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002772:
	word32 d5_248 = __swap(d5_170)
	word32 d6_249 = __swap(d6_167)
	d5_19 = DPB(d5_248, (word16) d6_249, 0)
	d6_17 = DPB(d6_249, 0x0000, 0)
	bLoc26_339 = true
	dwLoc24 = SEQ((word16) d1_101, dwLoc24)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002710:
	d1_101 = d1_101 - 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002692:
	word32 d0_261 = __swap(d0)
	word32 d1_262 = __swap(d1)
	word32 d0_264 = DPB(d0_261, (word16) d1_262, 0)
	word32 d0_273 = DPB(DPB(d0_264, (uint16) (d0_264 % (uint16) d2), 16), (word16) __swap(d1_262), 0)
	d2 = DPB(__swap((int32) (uint16) (d0_264 /u (uint16) d2)), (uint16) (d0_273 /u (uint16) d2), 0)
	d1 = __swap(DPB(DPB(d0_273, (uint16) (d0_273 % (uint16) d2), 16), 0x0000, 0))
	d0 = d2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002672:
	branch d1 == 0x00000000 l000027AA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002678:
	branch d2 - d1 >u 0x00000000 l000027AA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000267E:
	d0 = fn0000151E(d1, d2, d2, out d1)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000027AA:
	d1Out = d1
	d2Out = d2
	return d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002664_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn000027B0(word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31]
// LiveOut: d1
// Trashed: CVZNX a0 a1 d0 d1
// Preserved: a7 d2 d3 d4 d5 d6 d7
fn000027B0_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000027B0:
	word32 d1_162 = dwArg08
	word32 d3_194 = dwArg10
	branch dwArg0C != 0x00000000 l00002802
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002802:
	branch dwArg04 - dwArg0C <u 0x00000000 l000028BC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002808:
	word32 d4_32 = 24
	word32 d6_33 = __rol(dwArg0C, 0x00000008)
	branch (byte) d6_33 != 0x00 l00002826
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002812:
	d4_32 = 16
	d6_33 = __rol(d6_33, 0x00000008)
	branch (byte) d6_33 != 0x00 l00002826
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000281A:
	d4_32 = 8
	d6_33 = __rol(d6_33, 0x00000008)
	branch (byte) d6_33 != 0x00 l00002826
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002822:
	d4_32 = 0
	d6_33 = DPB(d6_33, (byte) dwArg0C, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002826:
	word32 d4_61 = DPB(d4_32, (byte) d4_32 + Mem20[0x00003E5C + (int32) ((word16) d6_33 & 0x00FF):byte], 0)
	word32 d5_63 = 32 - d4_61
	branch d5_63 != 0x00000000 l00002848
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002848:
	word32 d1_86
	word32 d2_87
	word32 d0_85 = fn00002664(dwArg04 >>u d4_61, dwArg04 << d5_63 | dwArg08 >>u d4_61, dwArg0C << d5_63 | dwArg10 >>u d4_61, out d1_86, out d2_87)
	word32 d3_72 = dwArg10 << d5_63
	word32 d7_101 = __swap(d0_85)
	word32 d6_103 = __swap(d3_72)
	word32 d3_102 = d3_72 *u (word16) d7_101
	word32 d2_107 = __swap(d0_85 *u (word16) d3_72)
	word16 v33_108 = (word16) (d2_107 + d3_102)
	word32 d4_104 = d0_85 *u (word16) d6_103
	word16 v35_114 = (word16) (DPB(d2_107, v33_108, 0) + d4_104)
	word32 d2_120 = __swap(DPB(d2_107, v35_114, 0))
	word32 d7_105 = d7_101 *u (word16) d6_103
	word32 d6_82 = dwArg08 << d5_63
	word32 d3_126 = __swap(DPB(d3_102, 0x0000, 0)) + __swap(DPB(d4_104, 0x0000, 0)) + DPB(d7_105, ((word16) d7_105 + (v33_108 <u 0x0000)) + (v35_114 <u 0x0000), 0)
	word32 v40_128 = d1_86 - d2_120
	branch v40_128 <u 0x00000000 l000028A4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000289E:
	branch v40_128 != 0x00000000 l000028A8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000028A0:
	branch d6_82 - d3_126 >=u 0x00000000 l000028A8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000028A4:
	d3_126 = d3_126 - d3_72
	d2_120 = d2_120 - d2_87 - (d3_126 <u 0x00000000)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000028A8:
	word32 d6_148 = d6_82 - d3_126
	d1_162 = d1_86 - d2_120 - (d6_148 <u 0x00000000) << 32 - d5_63 | d6_148 >>u d5_63
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000283A:
	branch dwArg0C - dwArg04 <u 0x00000000 l00002842
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000283E:
	branch dwArg10 - dwArg08 >u 0x00000000 l000028BC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002842:
	d1_162 = dwArg08 - dwArg10
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000027C8:
	branch dwArg04 - dwArg10 >=u 0x00000000 l000027DA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000027DA:
	branch dwArg10 != 0x00000000 l000027E6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000027DE:
	d3_194 = (int32) (uint16) (1 /u (uint16) dwArg10)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000027E6:
	word32 d1_203
	word32 d2_204
	fn00002664(0, dwArg04, d3_194, out d1_203, out d2_204)
	fn00002664(d1_203, dwArg08, d2_204, out d1_162, out d2_347)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000027CC:
	fn00002664(dwArg04, dwArg08, dwArg10, out d1_162, out d2_346)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000028BC:
	return d1_162
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn000027B0_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



void fn00002BAC(word32 d2, word32 a3, word32 dwArg04)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a3:[0..31] d2:[0..31] Stack +0004:[0..31]
// LiveOut:
// Trashed: CVZN a0 a1 a4 a5 d0 d1
// Preserved: X a2 a7
fn00002BAC_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002BAC:
	branch dwArg04 == 0x00000000 l00002BC4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002BC4:
	word32 a2_10 = Mem5[0x00003F88:word32]
	branch a2_10 == 0x00000000 l00002BEA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002BCE:
	branch (Mem16[a2_10 + 24:word32] & 2) == 0x00000000 l00002BE0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002BD6:
	fn000020B0(d2, a3, a2_10, out a0_109, out a1_110, out a5_111)
	Mem43 = Mem25
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002BE0:
	a2_10 = Mem43[a2_10 + 12:word32]
	branch a2_10 != 0x00000000 l00002BCE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002BB8:
	fn000020B0(d2, a3, dwArg04, out a0_54, out a1_55, out a5_57)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002BEA:
	return
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002BAC_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00002BF0(word32 d0, word32 d1, word32 a1, word32 a3, word32 a5, word32 dwArg04, ptr32 & d1Out, ptr32 & a1Out, ptr32 & a3Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1:[0..31] a3:[0..31] a5:[0..31] d0:[0..31] d1:[0..31] Stack +0004:[0..31]
// LiveOut: a1 a3 a5 d0 d1
// Trashed: CVZNX a0 a1 a2 a3 a4 a5 a6 d0 d1 d2 d3 d4 d5 d6 d7
// Preserved: a7
fn00002BF0_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002BF0:
	word32 a3_22
	word32 a5_24
	word32 a1_34
	word32 d1_35
	word32 d0_27 = fn00002C3C(d0, d1, a1, a3, a5, Mem10[0x00003F7C:word32], dwArg04, fp + 8, out d1_35, out a1_34, out a3_22, out a5_24)
	d1Out = d1_35
	a1Out = a1_34
	a3Out = a3_22
	a5Out = a5_24
	return d0_27
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002BF0_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00002C0C(byte bArg07, word32 dwArg08)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  Stack +0007:[0..7] Stack +0008:[0..31]
// LiveOut: d0
// Trashed: CVZNX a0 d0
// Preserved: a2 a7
fn00002C0C_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002C0C:
	word32 d0_10 = dwArg08
	branch dwArg08 == 0x00000000 l00002C36
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002C18:
	d0_10 = Mem5[dwArg08 + 4:word32]
	branch d0_10 - Mem5[dwArg08 + 8:word32] >=u 0x00000000 l00002C2A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002C22:
	Mem16[Mem5[dwArg08 + 4:word32]:byte] = bArg07
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002C2A:
	Mem22[dwArg08 + 20:word32] = Mem20[dwArg08 + 20:word32] + 0x00000001
	Mem25[dwArg08 + 4:word32] = Mem22[dwArg08 + 4:word32] - 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002C36:
	return d0_10
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002C0C_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00002C3C(word32 d0, word32 d1, word32 a1, word32 a3, word32 a5, word32 dwArg04, word32 dwArg08, word32 dwArg0C, ptr32 & d1Out, ptr32 & a1Out, ptr32 & a3Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a1:[0..31] a3:[0..31] a5:[0..31] d0:[8..31] d1:[0..31] Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31]
// LiveOut: a1 a3 a5 d0 d1
// Trashed: CVZNX a0 a1 a2 a3 a4 a5 a6 a7 d0 d1 d2 d3 d4 d5 d6 d7
// Preserved:
fn00002C3C_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002C3C:
	word32 a7_1291 = fp + -120
	word32 d2_1337 = dwArg0C
	word32 a4_269 = dwArg08
	word32 a2_108 = dwArg04
	word32 d4_1289 = 0
	word32 d5_1009 = 0
	branch Mem40[dwArg08:byte] == 0x00 l00003C3E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002C5E:
	word32 d3_128
	word32 d3_1810 = 0
	branch Mem49[a4_269:byte] != 0x25 l00003B3C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003B3C:
	word32 d0_61 = (int32) Mem49[0x000028C5 + (DPB(d0, Mem49[a4_269:byte], 0) & 0x000000FF):byte]
	d0 = d0_61 & 0x00000008
	branch (d0_61 & 0x00000008) == 0x00000000 l00003BC8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003BC8:
	word32 a0_68 = a2_108 + 24
	Mem70[a0_68:word32] = Mem49[a0_68:word32] | 0x00000001
	word32 a0_71 = a2_108 + 20
	word32 v103_72 = Mem70[a0_71:word32] - 0x00000001
	Mem73[a0_71:word32] = v103_72
	branch v103_72 < 0x00000000 l00003BFA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003BFA:
	word32 a7_77 = a7_1291 - 4
	Mem79[a7_77:word32] = a2_108
	Mem94[a7_77 + 48:word32] = fn00003CE0(d2_1337, a3, Mem79[a7_77:word32], out d1, out a1, out a5)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003BDA:
	a1 = a2_108 + 4
	word32 a0_98 = Mem73[a1:word32]
	word32 a7_99 = a7_1291 - 4
	Mem101[a7_99:word32] = a2_108
	Mem105[a1:word32] = a0_98 + 1
	a2_108 = Mem105[a7_99:word32]
	byte v107_109 = Mem105[a0_98:byte]
	Mem114[a7_99:word32] = d1
	Mem119[a7_99 + 48:word32] = (int32) v107_109
	d1 = Mem119[a7_99:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003C08:
	d0 = (int32) (int16) Mem125[a4_269:byte]
	d5_1009 = Mem125[a7_1291 + 44:word32]
	d3_128 = 0x00000001
	d4_1289 = d4_1289 + 0x00000001
	branch d0 - Mem125[a7_1291 + 44:word32] == 0x00000000 l00003C32
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003C1C:
	branch d5_1009 == 0xFFFFFFFF l00003C2E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003C24:
	word32 a7_145 = a7_1291 - 4
	Mem148[a7_145:word32] = a2_108
	Mem151[a7_145 - 4:word32] = d5_1009
	d0 = fn00002C0C(Mem151[a7_145 - 1:byte], Mem151[a7_145:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003C2E:
	d3_128 = 0x00000000
	d4_1289 = d4_1289 - 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003B58:
	word32 d0_186
	word32 a0_167 = a2_108 + 24
	Mem170[a0_167:word32] = Mem168[a0_167:word32] | 0x00000001
	word32 a0_171 = a2_108 + 20
	word32 v88_172 = Mem170[a0_171:word32] - 0x00000001
	Mem173[a0_171:word32] = v88_172
	branch v88_172 < 0x00000000 l00003B82
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003B82:
	word32 a7_177 = a7_1291 - 4
	Mem179[a7_177:word32] = a2_108
	d0_186 = fn00003CE0(d2_1337, a3, Mem179[a7_177:word32], out d1_4061, out a1, out a5)
	d1 = d0_186
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003B6A:
	a1 = a2_108 + 4
	word32 a0_197 = Mem173[a1:word32]
	word32 a7_198 = a7_1291 - 4
	Mem200[a7_198:word32] = a2_108
	Mem204[a1:word32] = a0_197 + 1
	byte v92_208 = Mem204[a0_197:byte]
	a2_108 = Mem204[a7_198:word32]
	d0_186 = DPB(d0, v92_208, 0)
	d1 = (int32) v92_208
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003B8E:
	word32 d0_233 = (int32) Mem231[0x000028C5 + (DPB(d0_186, (byte) d1, 0) & 0x000000FF):byte]
	d5_1009 = d1
	d4_1289 = d4_1289 + 0x00000001
	d0 = d0_233 & 0x00000008
	branch (d0_233 & 0x00000008) != 0x00000000 l00003B58
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003BB0:
	branch d1 == 0xFFFFFFFF l00003BC2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003BB8:
	word32 a7_243 = a7_1291 - 4
	Mem246[a7_243:word32] = a2_108
	Mem249[a7_243 - 4:word32] = d1
	d0 = fn00002C0C(Mem249[a7_243 - 1:byte], Mem249[a7_243:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003BC2:
	d4_1289 = d4_1289 - 0x00000001
	d3_128 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003C32:
	a4_269 = a4_269 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002C68:
	Mem272[a7_1291 + 72:byte] = 0x69
	Mem273[a7_1291 + 73:byte] = 0x00
	word32 a3_274 = a4_269 + 1
	word32 d0_282 = (int32) Mem273[0x000028C5 + (int32) Mem273[a3_274:byte]:byte]
	word32 d6_1096 = -1
	d0 = d0_282 & 0x00000004
	branch (d0_282 & 0x00000004) == 0x00000000 l00002CEC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002C90:
	word32 d0_296 = (int32) Mem273[0x000028C5 + (int32) Mem273[a3_274:byte]:byte]
	d6_1096 = 0
	d0 = d0_296 & 0x00000004
	branch (d0_296 & 0x00000004) == 0x00000000 l00002CEC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002CAA:
	word32 a7_304 = a7_1291 - 4
	Mem307[a7_304:word32] = d2_1337
	word32 d1_313 = __swap(10) *u (word16) d6_1096
	word32 d0_320 = (word16) d6_1096 *u 10 + DPB(__swap(DPB(d1_313, (word16) (d1_313 + __swap(d6_1096) *u 0x000A), 0)), 0x0000, 0)
	a3_274 = a3_274 + 1
	word32 d1_328 = (int32) Mem307[a3_274:byte]
	word32 d0_340 = (int32) Mem307[0x000028C5 + (int32) Mem307[a3_274:byte]:byte]
	d2_1337 = Mem307[a7_304:word32]
	d1 = d1_328 - 0x00000030
	d6_1096 = d1_328 - 0x00000030 + d0_320
	d0 = d0_340 & 0x00000004
	branch (d0_340 & 0x00000004) != 0x00000000 l00002CAA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002CEC:
	branch Mem347[a3_274:byte] == 0x68 l00002D16
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002CF2:
	branch Mem347[a3_274:byte] == 0x6C l00002D16
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002CF8:
	branch Mem347[a3_274:byte] == 0x4C l00002D16
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002CFE:
	branch Mem347[a3_274:byte] == 0x7A l00002D16
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D04:
	branch Mem347[a3_274:byte] == 0x6A l00002D16
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D0A:
	branch Mem347[a3_274:byte] == 0x74 l00002D16
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D10:
	branch Mem347[a3_274:byte] != 0x2A l00002D7E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D16:
	d7 = DPB(d7, Mem347[a7_1291 + 73:byte], 0)
	d1 = DPB(d1, Mem347[a7_1291 + 72:byte], 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D1E:
	branch Mem347[a3_274:byte] != 0x2A l00002D28
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D28:
	branch (byte) d1 != 0x68 l00002D38
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D2E:
	branch Mem347[a3_274:byte] != 0x68 l00002D38
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D38:
	branch (byte) d1 != 0x6C l00002D48
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D3E:
	branch Mem347[a3_274:byte] != 0x6C l00002D48
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D48:
	d1 = DPB(d1, Mem347[a3_274:byte], 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D44:
	d1 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D34:
	d1 = 2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D24:
	d7 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D4A:
	a3_274 = a3_274 + 1
	branch Mem347[a3_274:byte] == 0x68 l00002D1E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D52:
	branch Mem347[a3_274:byte] == 0x6C l00002D1E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D58:
	branch Mem347[a3_274:byte] == 0x4C l00002D1E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D5E:
	branch Mem347[a3_274:byte] == 0x7A l00002D1E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D64:
	branch Mem347[a3_274:byte] == 0x6A l00002D1E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D6A:
	branch Mem347[a3_274:byte] == 0x74 l00002D1E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D70:
	branch Mem347[a3_274:byte] == 0x2A l00002D1E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D76:
	Mem446[a7_1291 + 72:byte] = (byte) d1
	Mem452[a7_1291 + 73:byte] = (byte) d7
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D7E:
	branch Mem455[a7_1291 + 72:byte] != 0x6A l00002D8C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D86:
	Mem460[a7_1291 + 72:byte] = 0x01
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D8C:
	branch Mem463[a7_1291 + 72:byte] != 0x74 l00002D9A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D94:
	Mem468[a7_1291 + 72:byte] = 0x69
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002D9A:
	branch Mem471[a7_1291 + 72:byte] != 0x7A l00002DA8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002DA2:
	Mem476[a7_1291 + 72:byte] = 0x6C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002DA8:
	byte v71_483 = Mem482[a3_274:byte]
	a3 = a3_274 + 1
	d7 = DPB(d7, v71_483, 0)
	branch v71_483 == 0x00 l00002E1E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002DAC:
	branch v71_483 == 0x25 l00002E1E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002DB2:
	branch v71_483 == 0x63 l00002E1E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002DB8:
	branch v71_483 == 0x6E l00002E1E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002DBE:
	branch v71_483 == 0x5B l00002E1E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002DC4:
	word32 d0_524
	word32 a0_505 = a2_108 + 24
	Mem508[a0_505:word32] = Mem506[a0_505:word32] | 0x00000001
	word32 a0_509 = a2_108 + 20
	word32 v77_510 = Mem508[a0_509:word32] - 0x00000001
	Mem511[a0_509:word32] = v77_510
	branch v77_510 < 0x00000000 l00002DEE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002DEE:
	word32 a7_515 = a7_1291 - 4
	Mem517[a7_515:word32] = a2_108
	d0_524 = fn00003CE0(d2_1337, a3, Mem517[a7_515:word32], out d1_4060, out a1, out a5)
	d1 = d0_524
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002DD6:
	a1 = a2_108 + 4
	word32 a0_535 = Mem511[a1:word32]
	word32 a7_536 = a7_1291 - 4
	Mem538[a7_536:word32] = a2_108
	Mem542[a1:word32] = a0_535 + 1
	byte v83_546 = Mem542[a0_535:byte]
	a2_108 = Mem542[a7_536:word32]
	d0_524 = DPB(d0, v83_546, 0)
	d1 = (int32) v83_546
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002DFA:
	word32 d0_571 = (int32) Mem569[0x000028C5 + (DPB(d0_524, (byte) d1, 0) & 0x000000FF):byte]
	d5_1009 = d1
	d4_1289 = d4_1289 + 0x00000001
	d0 = d0_571 & 0x00000008
	branch (d0_571 & 0x00000008) != 0x00000000 l00002DC4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E1C:
	d3_1810 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E1E:
	word32 d1_590 = DPB(d1, v71_483 - 0x25, 0)
	branch v71_483 == 0x25 l0000326A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000326A:
	word32 a0_606 = a2_108 + 24
	Mem609[a0_606:word32] = Mem607[a0_606:word32] | 0x00000001
	word32 a0_610 = a2_108 + 20
	word32 v127_611 = Mem609[a0_610:word32] - 0x00000001
	Mem612[a0_610:word32] = v127_611
	branch v127_611 < 0x00000000 l0000329C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000329C:
	word32 a7_618 = a7_1291 - 4
	Mem620[a7_618:word32] = a2_108
	d0 = fn00003CE0(d2_1337, a3, Mem620[a7_618:word32], out d1, out a1, out a5)
	Mem647[a7_618 + 48:word32] = d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000327C:
	a1 = a2_108 + 4
	word32 a0_651 = Mem612[a1:word32]
	word32 a7_652 = a7_1291 - 4
	Mem654[a7_652:word32] = a2_108
	Mem658[a1:word32] = a0_651 + 1
	byte v131_662 = Mem658[a0_651:byte]
	a2_108 = Mem658[a7_652:word32]
	Mem677[a7_652:word32] = d1_590
	Mem682[a7_652 + 48:word32] = (int32) v131_662
	d0 = DPB(d0, v131_662, 0)
	d1 = Mem682[a7_652:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000032AA:
	d5_1009 = Mem688[a7_1291 + 44:word32]
	d3_128 = d3_1810 + 0x00000001
	d4_1289 = d4_1289 + 0x00000001
	branch Mem688[a7_1291 + 44:word32] == 0x00000025 l00003B36
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000032BE:
	branch d5_1009 == 0xFFFFFFFF l000032D0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000032C6:
	word32 a7_725 = a7_1291 - 4
	Mem728[a7_725:word32] = a2_108
	Mem731[a7_725 - 4:word32] = d5_1009
	d0 = fn00002C0C(Mem731[a7_725 - 1:byte], Mem731[a7_725:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000032D0:
	d3_128 = d3_128 - 0x00000001
	d4_1289 = d4_1289 - 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E28:
	branch v71_483 == 0x5B l00002F66
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F66:
	Mem750[a7_1291 + 44:byte] = 0x00
	branch Mem750[a3:byte] != 0x5E l00002F78
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F70:
	Mem755[a7_1291 + 44:byte] = 0x01
	a3 = a3 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F78:
	Mem759[a7_1291 + 52:word32] = 0x00000000
	byte v455_760 = Mem759[a7_1291 + 44:byte]
	d7 = DPB(d7, v455_760, 0)
	word32 d1_763 = Mem759[a7_1291 + 52:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F84:
	word32 d5_770
	branch v455_760 == 0x00 l00002F90
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F90:
	d5_770 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F88:
	d5_770 = 0x000000FF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F92:
	Mem783[a5 + d1_763:byte] = (byte) d5_770
	d1_763 = d1_763 + 0x00000001
	branch d1_763 <u 0x00000020 l00002F84
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002FA4:
	Mem793[a7_1291 + 132:word32] = d2_1337
	Mem796[a7_1291 + 44:byte] = v455_760
	byte v464_797 = Mem796[a7_1291 + 44:byte]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002FB0:
	branch Mem801[a3:byte] == 0x00 l00003026
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002FB4:
	byte v465_806 = Mem801[a3:byte]
	a3 = a3 + 1
	d1_763 = DPB(d1_763, v465_806, 0)
	branch Mem801[a3:byte] != 0x2D l00002FC8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002FBC:
	branch v465_806 - Mem801[a3 + 1:byte] >=u 0x00 l00002FC8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002FC8:
	d7 = DPB(d7, v465_806, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002FC2:
	a3 = a3 + 2
	d7 = DPB(d7, Mem801[a3 + 1:byte], 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002FCA:
	word32 d5_830 = (int32) v465_806
	d0 = (int32) (byte) d7
	branch d0 - d5_830 <u 0x00000000 l00003020
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002FD6:
	branch v464_797 == 0x00 l00002FFA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002FFA:
	word32 a0_848 = a7_1291 + 78 + (d5_830 >>u 0x00000003)
	d1_763 = (int32) Mem856[a0_848:byte]
	Mem861[a0_848:byte] = (byte) (1 << (d5_830 & 7) | d1_763)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002FDA:
	word32 a0_866 = a7_1291 + 78 + (d5_830 >>u 0x00000003)
	d1_763 = (int32) Mem856[a0_866:byte]
	Mem879[a0_866:byte] = (byte) (~(1 << (d5_830 & 7)) & d1_763)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003016:
	d5_830 = d5_830 + 0x00000001
	d0 = (int32) (byte) d7
	branch d0 - d5_830 >=u 0x00000000 l00002FD6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003020:
	branch Mem897[a3:byte] != 0x5D l00002FB0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003026:
	word32 a6_1126
	d2_1337 = Mem910[a7_1291 + 132:word32]
	a3 = a3 + 1
	branch Mem910[a7_1291 + 73:byte] != 0x00 l00003046
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003046:
	a6_1126 = 0x00000000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003032:
	word32 d0_922 = d2_1337 + 0x00000003 >>u 0x00000002
	d2_1337 = (d0_922 << 0x00000002) + 0x00000004
	d0 = d0_922 << 0x00000002
	a6_1126 = Mem910[d2_1337 + -4:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003048:
	word32 a0_940 = a2_108 + 24
	Mem943[a0_940:word32] = Mem910[a0_940:word32] | 0x00000001
	word32 a0_944 = a2_108 + 20
	word32 v482_945 = Mem943[a0_944:word32] - 0x00000001
	Mem946[a0_944:word32] = v482_945
	branch v482_945 < 0x00000000 l0000307A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000307A:
	word32 a7_950 = a7_1291 - 4
	Mem952[a7_950:word32] = a2_108
	d0 = fn00003CE0(d2_1337, a3, Mem952[a7_950:word32], out d1, out a1, out a5)
	Mem967[a7_950 + 48:word32] = d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000305A:
	a1 = a2_108 + 4
	word32 a0_971 = Mem946[a1:word32]
	word32 a7_972 = a7_1291 - 4
	Mem974[a7_972:word32] = a2_108
	Mem978[a1:word32] = a0_971 + 1
	byte v486_982 = Mem978[a0_971:byte]
	a2_108 = Mem978[a7_972:word32]
	Mem997[a7_972:word32] = d1_763
	Mem1002[a7_972 + 48:word32] = (int32) v486_982
	d0 = DPB(d0, v486_982, 0)
	d1 = Mem1002[a7_972:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003088:
	d5_1009 = Mem1008[a7_1291 + 44:word32]
	word32 d3_1022 = d3_1810 + 0x00000001
	word32 d4_1035 = d4_1289 + 0x00000001
	branch Mem1008[a7_1291 + 44:word32] == 0xFFFFFFFF l00003156
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000309C:
	word32 a7_1041 = a7_1291 - 4
	Mem1043[a7_1041:word32] = a7_1291 + 78
	Mem1047[a7_1041 - 4:word32] = a1
	Mem1049[a7_1041 - 0x00000008:word32] = 0x00000008
	Mem1052[a7_1041 - 0x0000000C:word32] = d5_1009
	d1 = (int32) Mem1052[Mem1052[a7_1041:word32] + fn000014EC(d2_1337, Mem1052[a7_1041 - 0x0000000C:word32], Mem1052[a7_1041 - 0x00000008:word32]):byte]
	a1 = Mem1052[a7_1041 - 0x00000004:word32]
	d0 = 1 << (d5_1009 & 7) & d1
	branch d0 == 0x00000000 l00003156
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000030CC:
	branch d6_1096 - d3_1022 <u 0x00000000 l00003156
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000030D2:
	byte v499_1112 = Mem1052[a7_1041 + 77:byte]
	d7 = DPB(d7, v499_1112, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000030D6:
	branch v499_1112 != 0x00 l000030DC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000030DA:
	Mem1127[a6_1126:byte] = (byte) d5_1009
	a6_1126 = a6_1126 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000030DC:
	word32 a0_1132 = a2_108 + 24
	Mem1136[a0_1132:word32] = Mem1133[a0_1132:word32] | 0x00000001
	word32 a0_1137 = a2_108 + 20
	word32 v504_1138 = Mem1136[a0_1137:word32] - 0x00000001
	Mem1139[a0_1137:word32] = v504_1138
	branch v504_1138 < 0x00000000 l00003106
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003106:
	word32 a7_1144 = a7_1291 - 4
	Mem1146[a7_1144:word32] = a2_108
	d0 = fn00003CE0(d2_1337, a3, Mem1146[a7_1144:word32], out d1_4066, out a1, out a5)
	d1 = d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000030EE:
	a1 = a2_108 + 4
	word32 a0_1166 = Mem1139[a1:word32]
	word32 a7_1167 = a7_1291 - 4
	Mem1169[a7_1167:word32] = a2_108
	Mem1173[a1:word32] = a0_1166 + 1
	byte v508_1177 = Mem1173[a0_1166:byte]
	a2_108 = Mem1173[a7_1167:word32]
	d0 = DPB(d0, v508_1177, 0)
	d1 = (int32) v508_1177
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003112:
	d5_1009 = d1
	d3_1022 = d3_1022 + 0x00000001
	d4_1035 = d4_1035 + 0x00000001
	branch d1 == 0xFFFFFFFF l00003152
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003120:
	word32 a7_1201 = a7_1291 - 4
	Mem1203[a7_1201:word32] = a7_1291 + 78
	Mem1207[a7_1201 - 4:word32] = a1
	Mem1209[a7_1201 - 0x00000008:word32] = 0x00000008
	Mem1212[a7_1201 - 0x0000000C:word32] = d1
	d1 = (int32) Mem1212[Mem1212[a7_1201:word32] + fn000014EC(d2_1337, Mem1212[a7_1201 - 0x0000000C:word32], Mem1212[a7_1201 - 0x00000008:word32]):byte]
	a1 = Mem1212[a7_1201 - 0x00000004:word32]
	d0 = 1 << (d1 & 7) & d1
	branch d0 == 0x00000000 l00003152
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000314E:
	branch d6_1096 - d3_1022 >=u 0x00000000 l000030D6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003152:
	Mem1255[a7_1291 + 73:byte] = v499_1112
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003156:
	branch d5_1009 == 0xFFFFFFFF l00003168
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000315E:
	word32 a7_1263 = a7_1291 - 4
	Mem1269[a7_1263:word32] = a2_108
	Mem1272[a7_1263 - 4:word32] = d5_1009
	d0 = fn00002C0C(Mem1272[a7_1263 - 1:byte], Mem1272[a7_1263:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003168:
	d3_128 = d3_1022 - 0x00000001
	d4_1289 = d4_1035 - 0x00000001
	branch Mem1292[a7_1291 + 73:byte] != 0x00 l00003B36
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003174:
	branch d3_128 == 0x00000000 l00003B36
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000317A:
	Mem1309[a6_1126:byte] = 0x00
	Mem1312[a7_1291 + 60:word32] = Mem1309[a7_1291 + 60:word32] + 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E30:
	word32 d1_1315 = DPB(d1, v71_483 - 0x63, 0)
	branch v71_483 == 0x63 l00002E46
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E46:
	branch d6_1096 != 0xFFFFFFFF l00002E50
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E4E:
	d6_1096 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E50:
	word32 a1_1329
	branch Mem607[a7_1291 + 73:byte] != 0x00 l00002E6A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E6A:
	a1_1329 = 0x00000000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E56:
	d0 = d2_1337 + 0x00000003 >>u 0x00000002 << 0x00000002
	d2_1337 = d0 + 0x00000004
	a1_1329 = Mem607[d0:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E6C:
	word32 a0_1343 = a2_108 + 24
	Mem1346[a0_1343:word32] = Mem607[a0_1343:word32] | 0x00000001
	word32 a0_1347 = a2_108 + 20
	Mem1349[a0_1347:word32] = Mem1346[a0_1347:word32] - 0x00000001
	Mem1354[a7_1291 + 44:word32] = a1_1329
	branch Test(LT,false) l00002EA4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002EA4:
	word32 a1_1359 = Mem1354[a7_1291 + 44:word32]
	word32 a7_1360 = a7_1291 - 4
	Mem1362[a7_1360:word32] = a2_108
	Mem1364[a7_1360 + 48:word32] = a1_1359
	d0 = fn00003CE0(d2_1337, a3, Mem1364[a7_1360:word32], out d1, out a1_4063, out a5)
	Mem1380[a7_1360 + 56:word32] = d0
	Mem1383[a7_1360 + 48:word32] = Mem1380[a7_1360 + 48:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E84:
	word32 a1_1386 = a2_108 + 4
	word32 a0_1387 = Mem1354[a1_1386:word32]
	word32 a7_1388 = a7_1291 - 4
	Mem1390[a7_1388:word32] = a2_108
	Mem1394[a1_1386:word32] = a0_1387 + 1
	byte v235_1398 = Mem1394[a0_1387:byte]
	a2_108 = Mem1394[a7_1388:word32]
	Mem1406[a7_1388:word32] = d1_1315
	Mem1411[a7_1388 + 56:word32] = (int32) v235_1398
	d0 = DPB(d0, v235_1398, 0)
	d1 = Mem1411[a7_1388:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002EC2:
	a1 = Mem1417[a7_1291 + 44:word32]
	d5_1009 = Mem1417[a7_1291 + 52:word32]
	word32 d3_1423 = d3_1810 + 0x00000001
	word32 d4_1427 = d4_1289 + 0x00000001
	branch Mem1417[a7_1291 + 52:word32] == 0xFFFFFFFF l00002F3A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002ED8:
	Mem1433[a7_1291 + 44:word32] = a1
	branch d6_1096 - d3_1423 <u 0x00000000 l00002F3A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002EE0:
	byte v249_1440 = Mem1433[a7_1291 + 73:byte]
	d7 = DPB(d7, v249_1440, 0)
	word32 a4_1446 = Mem1433[a7_1291 + 44:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002EE8:
	branch v249_1440 != 0x00 l00002EEE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002EEC:
	Mem1455[a4_1446:byte] = (byte) d5_1009
	a4_1446 = a4_1446 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002EEE:
	word32 a0_1460 = a2_108 + 24
	Mem1464[a0_1460:word32] = Mem1461[a0_1460:word32] | 0x00000001
	word32 a0_1465 = a2_108 + 20
	word32 v256_1466 = Mem1464[a0_1465:word32] - 0x00000001
	Mem1467[a0_1465:word32] = v256_1466
	branch v256_1466 < 0x00000000 l00002F18
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F18:
	word32 a7_1472 = a7_1291 - 4
	Mem1474[a7_1472:word32] = a2_108
	d0 = fn00003CE0(d2_1337, a3, Mem1474[a7_1472:word32], out d1_4064, out a1, out a5)
	d1 = d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F00:
	a1 = a2_108 + 4
	word32 a0_1494 = Mem1467[a1:word32]
	word32 a7_1495 = a7_1291 - 4
	Mem1497[a7_1495:word32] = a2_108
	Mem1501[a1:word32] = a0_1494 + 1
	byte v260_1505 = Mem1501[a0_1494:byte]
	a2_108 = Mem1501[a7_1495:word32]
	d0 = DPB(d0, v260_1505, 0)
	d1 = (int32) v260_1505
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F24:
	d5_1009 = d1
	d3_1423 = d3_1423 + 0x00000001
	d4_1427 = d4_1427 + 0x00000001
	branch d1 == 0xFFFFFFFF l00002F36
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F32:
	branch d6_1096 - d3_1423 >=u 0x00000000 l00002EE8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F36:
	Mem1539[a7_1291 + 73:byte] = v249_1440
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F3A:
	branch d5_1009 == 0xFFFFFFFF l00002F4C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F42:
	word32 a7_1547 = a7_1291 - 4
	Mem1553[a7_1547:word32] = a2_108
	Mem1556[a7_1547 - 4:word32] = d5_1009
	d0 = fn00002C0C(Mem1556[a7_1547 - 1:byte], Mem1556[a7_1547:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F4C:
	d3_128 = d3_1423 - 0x00000001
	d4_1289 = d4_1427 - 0x00000001
	branch Mem1576[a7_1291 + 73:byte] != 0x00 l00003B36
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F58:
	branch d3_128 == 0x00000000 l00003B36
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002F5E:
	Mem1587[a7_1291 + 60:word32] = Mem1576[a7_1291 + 60:word32] + 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E34:
	d1 = DPB(d1, v71_483 - 0x6E, 0)
	branch v71_483 == 0x6E l000032D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000032D8:
	branch Mem607[a7_1291 + 73:byte] != 0x00 l00003370
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000032E0:
	branch Mem607[a7_1291 + 72:byte] != 0x01 l00003302
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003302:
	branch Mem607[a7_1291 + 72:byte] != 0x6C l00003320
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003320:
	branch Mem607[a7_1291 + 72:byte] != 0x68 l0000333E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000333E:
	branch Mem607[a7_1291 + 72:byte] != 0x02 l0000335C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000335C:
	d0 = d2_1337 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem1619[Mem607[d0:word32]:word32] = d4_1289
	d2_1337 = d0 + 0x00000004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003346:
	d0 = d2_1337 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem1631[Mem607[d0:word32]:byte] = (byte) d4_1289
	d2_1337 = d0 + 0x00000004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003328:
	d0 = d2_1337 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem1643[Mem607[d0:word32]:word16] = (word16) d4_1289
	d2_1337 = d0 + 0x00000004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000330A:
	d0 = d2_1337 + 0x00000003 >>u 0x00000002 << 0x00000002
	Mem1655[Mem607[d0:word32]:word32] = d4_1289
	d2_1337 = d0 + 0x00000004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000032E8:
	d0 = d2_1337 + 0x00000003 >>u 0x00000002 << 0x00000002
	word32 a0_1665 = Mem607[d0:word32]
	Mem1667[a0_1665 + 4:word32] = d4_1289
	Mem1668[a0_1665:word32] = 0x00000000
	d2_1337 = d0 + 0x00000004
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003370:
	Mem1677[a7_1291 + 60:word32] = Mem1675[a7_1291 + 60:word32] + 0x00000001
	d3_128 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E3C:
	d1 = DPB(d1, v71_483 - 0x73, 0)
	branch v71_483 == 0x73 l00003184
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003184:
	branch Mem607[a7_1291 + 73:byte] != 0x00 l0000319E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000319E:
	a5 = 0x00000000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000318A:
	d0 = d2_1337 + 0x00000003 >>u 0x00000002 << 0x00000002
	d2_1337 = d0 + 0x00000004
	a5 = Mem607[d0:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000031A0:
	branch d5_1009 == 0xFFFFFFFF l0000323C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000031AA:
	word32 d0_1724 = (int32) Mem607[0x000028C5 + (DPB(d0, (byte) d5_1009, 0) & 0x000000FF):byte]
	d0 = d0_1724 & 0x00000008
	branch (d0_1724 & 0x00000008) != 0x00000000 l0000323C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000031C6:
	branch d6_1096 - d3_1810 <u 0x00000000 l0000323C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000031CA:
	byte v154_1736 = Mem607[a7_1291 + 73:byte]
	d7 = DPB(d7, v154_1736, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000031CE:
	branch v154_1736 != 0x00 l000031D4
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000031D2:
	Mem1748[a5:byte] = (byte) d5_1009
	a5 = a5 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000031D4:
	word32 a0_1753 = a2_108 + 24
	Mem1757[a0_1753:word32] = Mem1754[a0_1753:word32] | 0x00000001
	word32 a0_1758 = a2_108 + 20
	word32 v160_1759 = Mem1757[a0_1758:word32] - 0x00000001
	Mem1760[a0_1758:word32] = v160_1759
	branch v160_1759 < 0x00000000 l000031FE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000031FE:
	word32 a7_1765 = a7_1291 - 4
	Mem1767[a7_1765:word32] = a2_108
	d0 = fn00003CE0(d2_1337, a3, Mem1767[a7_1765:word32], out d1_4062, out a1, out a5)
	d1 = d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000031E6:
	a1 = a2_108 + 4
	word32 a0_1787 = Mem1760[a1:word32]
	word32 a7_1788 = a7_1291 - 4
	Mem1790[a7_1788:word32] = a2_108
	Mem1794[a1:word32] = a0_1787 + 1
	byte v164_1798 = Mem1794[a0_1787:byte]
	a2_108 = Mem1794[a7_1788:word32]
	d0 = DPB(d0, v164_1798, 0)
	d1 = (int32) v164_1798
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000320A:
	d5_1009 = d1
	d3_1810 = d3_1810 + 0x00000001
	d4_1289 = d4_1289 + 0x00000001
	branch d1 == 0xFFFFFFFF l00003238
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003218:
	word32 d0_1829 = (int32) Mem1827[0x000028C5 + (DPB(d0, (byte) d1, 0) & 0x000000FF):byte]
	d0 = d0_1829 & 0x00000008
	branch (d0_1829 & 0x00000008) != 0x00000000 l00003238
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003234:
	branch d6_1096 - d3_1810 >=u 0x00000000 l000031CE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003238:
	Mem1847[a7_1291 + 73:byte] = v154_1736
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000323C:
	branch d5_1009 == 0xFFFFFFFF l0000324E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003244:
	word32 a7_1855 = a7_1291 - 4
	Mem1861[a7_1855:word32] = a2_108
	Mem1864[a7_1855 - 4:word32] = d5_1009
	d0 = fn00002C0C(Mem1864[a7_1855 - 1:byte], Mem1864[a7_1855:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000324E:
	d3_128 = d3_1810 - 0x00000001
	d4_1289 = d4_1289 - 0x00000001
	branch Mem1885[a7_1291 + 73:byte] != 0x00 l00003B36
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000325A:
	branch d3_128 == 0x00000000 l00003B36
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003260:
	Mem1901[a5:byte] = 0x00
	Mem1904[a7_1291 + 60:word32] = Mem1901[a7_1291 + 60:word32] + 0x00000001
	a5 = a5 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00002E42:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000337A:
	Mem1906[a7_1291 + 48:word32] = 0x00000000
	Mem1907[a7_1291 + 44:word32] = 0x00000000
	Mem1908[a7_1291 + 110:word32] = 0x00000000
	branch v71_483 != 0x00 l0000338C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000338A:
	a3 = a3 - 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000338C:
	branch v71_483 != 0x70 l0000339A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003392:
	Mem1920[a7_1291 + 72:byte] = 0x6C
	d7 = 120
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000339A:
	branch d5_1009 != 0x0000002D l000033A8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000033A2:
	branch (byte) d7 != 0x75 l000033B0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000033A8:
	branch d5_1009 != 0x0000002B l00003400
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000033B0:
	branch d6_1096 - d3_1810 <u 0x00000000 l00003400
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000033B4:
	Mem1952[a7_1291 + 110:word32] = d5_1009
	word32 a0_1957 = a2_108 + 24
	Mem1959[a0_1957:word32] = Mem1952[a0_1957:word32] | 0x00000001
	word32 a0_1960 = a2_108 + 20
	word32 v186_1961 = Mem1959[a0_1960:word32] - 0x00000001
	Mem1962[a0_1960:word32] = v186_1961
	branch v186_1961 < 0x00000000 l000033EA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000033EA:
	word32 a7_1965 = a7_1291 - 4
	Mem1967[a7_1965:word32] = a2_108
	d0 = fn00003CE0(d2_1337, a3, Mem1967[a7_1965:word32], out d1, out a1, out a5)
	Mem1988[a7_1965 + 56:word32] = d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000033CA:
	a1 = a2_108 + 4
	word32 a0_1992 = Mem1962[a1:word32]
	word32 a7_1993 = a7_1291 - 4
	Mem1995[a7_1993:word32] = a2_108
	Mem1999[a1:word32] = a0_1992 + 1
	byte v190_2003 = Mem1999[a0_1992:byte]
	a2_108 = Mem1999[a7_1993:word32]
	Mem2015[a7_1993:word32] = d1
	Mem2020[a7_1993 + 56:word32] = (int32) v190_2003
	d0 = DPB(d0, v190_2003, 0)
	d1 = Mem2020[a7_1993:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000033F8:
	d5_1009 = Mem2026[a7_1291 + 52:word32]
	d3_1810 = d3_1810 + 0x00000001
	d4_1289 = d4_1289 + 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003400:
	branch (byte) d7 != 0x69 l00003572
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003408:
	branch d5_1009 != 0x00000030 l00003534
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003412:
	branch d6_1096 - d3_1810 <u 0x00000000 l00003534
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003534:
	word32 d0_2071 = (int32) Mem2065[0x000028C5 + (DPB(d0, (byte) d5_1009, 0) & 0x000000FF):byte]
	d0 = d0_2071 & 0x00000004
	branch (d0_2071 & 0x00000004) != 0x00000000 l00003572
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003550:
	word32 d0_2084 = (int32) Mem2065[0x000028C5 + (DPB(d0_2071 & 0x00000004, (byte) d5_1009, 0) & 0x000000FF):byte]
	d0 = d0_2084 & 0x00000044
	branch (d0_2084 & 0x00000044) == 0x00000000 l00003572
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000356C:
	branch d6_1096 - d3_1810 <u 0x00000000 l00003572
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003570:
	d7 = 120
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003418:
	word32 d0_2119
	word32 a0_2099 = a2_108 + 24
	Mem2101[a0_2099:word32] = Mem2065[a0_2099:word32] | 0x00000001
	word32 a0_2102 = a2_108 + 20
	word32 v202_2103 = Mem2101[a0_2102:word32] - 0x00000001
	Mem2104[a0_2102:word32] = v202_2103
	branch v202_2103 < 0x00000000 l0000344A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000344A:
	word32 a7_2108 = a7_1291 - 4
	Mem2110[a7_2108:word32] = a2_108
	d0_2119 = fn00003CE0(d2_1337, a3, Mem2110[a7_2108:word32], out d1, out a1, out a5)
	Mem2127[a7_2108 + 56:word32] = d0_2119
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000342A:
	a1 = a2_108 + 4
	word32 a0_2131 = Mem2104[a1:word32]
	word32 a7_2132 = a7_1291 - 4
	Mem2134[a7_2132:word32] = a2_108
	Mem2138[a1:word32] = a0_2131 + 1
	byte v206_2142 = Mem2138[a0_2131:byte]
	a2_108 = Mem2138[a7_2132:word32]
	Mem2148[a7_2132:word32] = d1
	Mem2153[a7_2132 + 56:word32] = (int32) v206_2142
	d0_2119 = DPB(d0, v206_2142, 0)
	d1 = Mem2153[a7_2132:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003458:
	Mem2161[a7_1291 + 64:word32] = Mem2159[a7_1291 + 52:word32]
	word32 d0_2170 = DPB(d0_2119, Mem2161[a7_1291 + 55:byte], 0)
	word32 d3_2163 = d3_1810 + 0x00000001
	d0 = d0_2170 & 0x000000FF
	branch __btst(Mem2161[0x000028C5 + (int32) ((int16) (d0_2170 & 0x000000FF)):byte], 0x0000) l0000347E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000347A:
	d0 = DPB(d0_2170 & 0x000000FF, (byte) (d0_2170 & 0x000000FF) | 0x20, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000347E:
	branch d0 != 0x00000078 l00003516
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003488:
	branch d6_1096 - d3_2163 <u 0x00000000 l00003516
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003516:
	d7 = 111
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000348E:
	word32 d0_2217
	word32 a0_2196 = a2_108 + 24
	Mem2199[a0_2196:word32] = Mem2161[a0_2196:word32] | 0x00000001
	word32 a0_2200 = a2_108 + 20
	word32 v220_2201 = Mem2199[a0_2200:word32] - 0x00000001
	Mem2202[a0_2200:word32] = v220_2201
	branch v220_2201 < 0x00000000 l000034C0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000034C0:
	word32 a7_2206 = a7_1291 - 4
	Mem2208[a7_2206:word32] = a2_108
	d0_2217 = fn00003CE0(d2_1337, a3, Mem2208[a7_2206:word32], out d1, out a1, out a5)
	Mem2225[a7_2206 + 56:word32] = d0_2217
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000034A0:
	a1 = a2_108 + 4
	word32 a0_2229 = Mem2202[a1:word32]
	word32 a7_2230 = a7_1291 - 4
	Mem2232[a7_2230:word32] = a2_108
	Mem2236[a1:word32] = a0_2229 + 1
	byte v224_2240 = Mem2236[a0_2229:byte]
	a2_108 = Mem2236[a7_2230:word32]
	Mem2246[a7_2230:word32] = d1
	Mem2251[a7_2230 + 56:word32] = (int32) v224_2240
	d0_2217 = DPB(d0, v224_2240, 0)
	d1 = Mem2251[a7_2230:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000034CE:
	Mem2259[a7_1291 + 74:word32] = Mem2257[a7_1291 + 52:word32]
	word32 d0_2277 = (int32) Mem2259[0x000028C5 + (DPB(d0_2217, (byte) d5_1009, 0) & 0x000000FF):byte]
	d0 = d0_2277 & 0x00000044
	branch (d0_2277 & 0x00000044) == 0x00000000 l000034FA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000034F4:
	branch d6_1096 - (d3_2163 + 0x00000001) <u 0x00000000 l000034FA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000034F8:
	d7 = 120
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000034FA:
	branch Mem2259[a7_1291 + 74:word32] == 0xFFFFFFFF l00003510
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003504:
	word32 a7_2294 = a7_1291 - 4
	Mem2298[a7_2294:word32] = a2_108
	Mem2302[a7_2294 - 4:word32] = Mem2298[a7_2294 + 78:word32]
	d0 = fn00002C0C(Mem2302[a7_2294 - 1:byte], Mem2302[a7_2294:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003510:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003518:
	branch Mem2322[a7_1291 + 64:word32] == 0xFFFFFFFF l0000352E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003522:
	word32 a7_2328 = a7_1291 - 4
	Mem2333[a7_2328:word32] = a2_108
	Mem2337[a7_2328 - 4:word32] = Mem2333[a7_2328 + 68:word32]
	d0 = fn00002C0C(Mem2337[a7_2328 - 1:byte], Mem2337[a7_2328:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000352E:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003572:
	word32 d4_2484 = d4_1289
	word32 d3_2383 = d3_1810
	branch (byte) d7 != 0x78 l000036A6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000357A:
	branch d5_1009 != 0x00000030 l000036A6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003584:
	branch d6_1096 - d3_1810 <u 0x00000000 l000036A6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000358A:
	word32 d0_2426
	word32 a0_2390 = a2_108 + 24
	Mem2394[a0_2390:word32] = Mem2391[a0_2390:word32] | 0x00000001
	word32 a0_2395 = a2_108 + 20
	word32 v287_2396 = Mem2394[a0_2395:word32] - 0x00000001
	Mem2397[a0_2395:word32] = v287_2396
	branch v287_2396 < 0x00000000 l000035BC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000035BC:
	word32 a7_2403 = a7_1291 - 4
	Mem2405[a7_2403:word32] = a2_108
	d0_2426 = fn00003CE0(d2_1337, a3, Mem2405[a7_2403:word32], out d1, out a1, out a5)
	Mem2434[a7_2403 + 56:word32] = d0_2426
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000359C:
	a1 = a2_108 + 4
	word32 a0_2438 = Mem2397[a1:word32]
	word32 a7_2439 = a7_1291 - 4
	Mem2441[a7_2439:word32] = a2_108
	Mem2445[a1:word32] = a0_2438 + 1
	byte v291_2449 = Mem2445[a0_2438:byte]
	a2_108 = Mem2445[a7_2439:word32]
	Mem2467[a7_2439:word32] = d1
	Mem2472[a7_2439 + 56:word32] = (int32) v291_2449
	d0_2426 = DPB(d0, v291_2449, 0)
	d1 = Mem2472[a7_2439:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000035CA:
	Mem2480[a7_1291 + 64:word32] = Mem2478[a7_1291 + 52:word32]
	word32 d0_2490 = DPB(d0_2426, Mem2480[a7_1291 + 55:byte], 0)
	word32 d3_2482 = d3_1810 + 0x00000001
	word32 d4_2486 = d4_1289 + 0x00000001
	d0 = d0_2490 & 0x000000FF
	branch __btst(Mem2480[0x000028C5 + (int32) ((int16) (d0_2490 & 0x000000FF)):byte], 0x0000) l000035F0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000035EC:
	d0 = DPB(d0_2490 & 0x000000FF, (byte) (d0_2490 & 0x000000FF) | 0x20, 0)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000035F0:
	branch d0 != 0x00000078 l0000368C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000035FA:
	branch d6_1096 - d3_2482 <u 0x00000000 l0000368C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003600:
	word32 d0_2535
	word32 a0_2514 = a2_108 + 24
	Mem2517[a0_2514:word32] = Mem2480[a0_2514:word32] | 0x00000001
	word32 a0_2518 = a2_108 + 20
	word32 v304_2519 = Mem2517[a0_2518:word32] - 0x00000001
	Mem2520[a0_2518:word32] = v304_2519
	branch v304_2519 < 0x00000000 l00003632
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003632:
	word32 a7_2524 = a7_1291 - 4
	Mem2526[a7_2524:word32] = a2_108
	d0_2535 = fn00003CE0(d2_1337, a3, Mem2526[a7_2524:word32], out d1, out a1, out a5)
	Mem2543[a7_2524 + 56:word32] = d0_2535
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003612:
	a1 = a2_108 + 4
	word32 a0_2547 = Mem2520[a1:word32]
	word32 a7_2548 = a7_1291 - 4
	Mem2550[a7_2548:word32] = a2_108
	Mem2554[a1:word32] = a0_2547 + 1
	byte v308_2558 = Mem2554[a0_2547:byte]
	a2_108 = Mem2554[a7_2548:word32]
	Mem2564[a7_2548:word32] = d1
	Mem2569[a7_2548 + 56:word32] = (int32) v308_2558
	d0_2535 = DPB(d0, v308_2558, 0)
	d1 = Mem2569[a7_2548:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003640:
	Mem2577[a7_1291 + 74:word32] = Mem2575[a7_1291 + 52:word32]
	word32 d0_2592 = (int32) Mem2577[0x000028C5 + (DPB(d0_2535, Mem2577[a7_1291 + 55:byte], 0) & 0x000000FF):byte]
	d3_2383 = d3_2482 + 0x00000001
	d4_2484 = d4_2486 + 0x00000001
	d0 = d0_2592 & 0x00000044
	branch (d0_2592 & 0x00000044) == 0x00000000 l00003672
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003668:
	branch d6_1096 - (d3_2482 + 0x00000001) <u 0x00000000 l00003672
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003672:
	branch Mem2577[a7_1291 + 74:word32] == 0xFFFFFFFF l00003688
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000367C:
	word32 a7_2607 = a7_1291 - 4
	Mem2611[a7_2607:word32] = a2_108
	Mem2615[a7_2607 - 4:word32] = Mem2611[a7_2607 + 78:word32]
	d0 = fn00002C0C(Mem2615[a7_2607 - 1:byte], Mem2615[a7_2607:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003688:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000368C:
	branch Mem2634[a7_1291 + 64:word32] == 0xFFFFFFFF l000036A2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003696:
	word32 a7_2639 = a7_1291 - 4
	Mem2643[a7_2639:word32] = a2_108
	Mem2647[a7_2639 - 4:word32] = Mem2643[a7_2639 + 68:word32]
	d0 = fn00002C0C(Mem2647[a7_2639 - 1:byte], Mem2647[a7_2639:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000036A2:
	d3_2383 = d3_2482 - 0x00000001
	d4_2484 = d4_2486 - 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000366C:
	d5_1009 = Mem2577[a7_1291 + 74:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000036A6:
	branch (byte) d7 == 0x78 l000036B2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000036AC:
	branch (byte) d7 != 0x58 l000036BC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000036BC:
	branch (byte) d7 != 0x6F l000036CC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000036CC:
	Mem2686[a7_1291 + 52:word32] = 0x0000000A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000036C2:
	Mem2689[a7_1291 + 52:word32] = 0x00000008
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000036D4:
	Mem2694[a7_1291 + 64:word32] = Mem2692[a7_1291 + 52:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000036B2:
	Mem2698[a7_1291 + 64:word32] = 0x00000010
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000036DA:
	Mem2703[a7_1291 + 114:word32] = Mem2701[a7_1291 + 64:word32]
	word32 d0_2730 = (int32) Mem2703[0x000028C5 + (DPB(d0, (byte) d5_1009, 0) & 0x000000FF):byte]
	Mem2742[a7_1291 + 132:word32] = d2_1337
	Mem2748[a7_1291 + 52:word32] = d4_2484
	Mem2753[a7_1291 + 74:byte] = (byte) d7
	d0 = d0_2730 & 0x00000044
	branch (d0_2730 & 0x00000044) == 0x00000000 l00003942
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000370C:
	branch Mem2753[a7_1291 + 114:word32] != 0x0000000A l00003742
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003716:
	word32 d0_2768 = (int32) Mem2753[0x000028C5 + (DPB(d0_2730 & 0x00000044, (byte) d5_1009, 0) & 0x000000FF):byte]
	Mem2771[a7_1291 + 132:word32] = d2_1337
	Mem2773[a7_1291 + 52:word32] = d4_2484
	Mem2775[a7_1291 + 74:byte] = (byte) d7
	d0 = d0_2768 & 0x00000004
	branch (d0_2768 & 0x00000004) == 0x00000000 l00003942
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003742:
	branch Mem2781[a7_1291 + 114:word32] != 0x00000008 l00003762
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000374C:
	Mem2787[a7_1291 + 132:word32] = d2_1337
	Mem2790[a7_1291 + 52:word32] = d4_2484
	Mem2793[a7_1291 + 74:byte] = (byte) d7
	branch d5_1009 > 0x00000037 l00003942
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003762:
	Mem2801[a7_1291 + 132:word32] = d2_1337
	Mem2804[a7_1291 + 52:word32] = d4_2484
	Mem2816[a7_1291 + 64:word32] = d6_1096
	Mem2819[a7_1291 + 74:byte] = (byte) d7
	branch d6_1096 - d3_2383 <u 0x00000000 l00003942
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003778:
	d7 = Mem2819[a7_1291 + 114:word32]
	word32 a4_2831 = Mem2819[a7_1291 + 64:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003780:
	word32 a7_2836 = a7_1291 - 4
	Mem2839[a7_2836:word32] = d2_1337
	word32 v347_2843 = Mem2839[a7_2836:word32]
	Mem2848[a7_2836:word32] = d7 >> 31
	Mem2851[a7_2836 - 4:word32] = d7
	Mem2855[a7_2836 - 8:word32] = a1
	Mem2859[a7_2836 - 12:word32] = Mem2855[a7_2836 + 52:word32]
	Mem2863[a7_2836 - 16:word32] = Mem2859[a7_2836 + 48:word32]
	Mem2866[a7_2836 - 20:word32] = d7
	Mem2868[a7_2836 - 24:word32] = d7 >> 31
	word32 d1_2871
	Mem2882[a7_2836 + 68:word32] = fn00003C60(d4_2484, Mem2868[a7_2836 - 24:word32], Mem2868[a7_2836 - 20:word32], Mem2868[a7_2836 - 16:word32], Mem2868[a7_2836 - 12:word32], out d1_2871)
	Mem2884[a7_2836 + 72:word32] = d1_2871
	branch ((int32) Mem2884[0x000028C5 + (DPB(Mem2884[a7_2836:word32], (byte) d5_1009, 0) & 0x000000FF):byte] & 0x00000004) == 0x00000000 l000037E0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000037E0:
	d4_2484 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000037D6:
	d4_2484 = d5_1009 - 0x00000030
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000037E2:
	word32 d6_2961
	Mem2915[a7_1291 - 4:word32] = v347_2843
	Mem2923[a7_1291 - 4:word32] = Mem2915[a7_1291 - 4:word32]
	word32 d2_2925 = d4_2484 + Mem2923[a7_1291 + 68:word32]
	Mem2928[a7_1291 + 48:word32] = d2_2925
	Mem2934[a7_1291 - 8:word32] = d3_2383
	word32 d0_2917 = d4_2484 >> 31
	Mem2940[a7_1291 + 44:word32] = Mem2934[a7_1291 + 64:word32] + d0_2917 + (d2_2925 <u 0x00000000)
	word32 v367_2941 = Mem2940[a7_1291 - 8:word32]
	word32 v368_2944 = Mem2940[a7_1291 - 4:word32]
	branch ((int32) Mem2940[0x000028C5 + (DPB(d0_2917, (byte) d5_1009, 0) & 0x000000FF):byte] & 0x00000001) == 0x00000000 l00003832
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003832:
	d6_2961 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003828:
	d6_2961 = d5_1009 - 0x00000037
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003834:
	word32 d2_3018
	Mem2973[a7_1291 - 4:word32] = v368_2944
	Mem2981[a7_1291 - 4:word32] = Mem2973[a7_1291 - 4:word32]
	word32 d2_2983 = d6_2961 + Mem2981[a7_1291 + 48:word32]
	Mem2986[a7_1291 + 68:word32] = d2_2983
	Mem2991[a7_1291 - 8:word32] = v367_2941
	word32 d0_2975 = d6_2961 >> 31
	Mem2997[a7_1291 + 64:word32] = Mem2991[a7_1291 + 44:word32] + d0_2975 + (d2_2983 <u 0x00000000)
	word32 v377_2998 = Mem2997[a7_1291 - 8:word32]
	branch ((int32) Mem2997[0x000028C5 + (DPB(d0_2975, (byte) d5_1009, 0) & 0x000000FF):byte] & 0x00000002) == 0x00000000 l00003884
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003884:
	d2_3018 = 0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000387A:
	d2_3018 = d5_1009 - 0x00000057
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003886:
	word32 d0_3083
	Mem3029[a7_1291 - 4:word32] = d2_3018
	Mem3037[a7_1291 - 4:word32] = Mem3029[a7_1291 - 4:word32]
	word32 d2_3039 = d2_3018 + Mem3037[a7_1291 + 68:word32]
	Mem3042[a7_1291 + 48:word32] = d2_3039
	Mem3047[a7_1291 - 8:word32] = v377_2998
	Mem3052[a7_1291 + 44:word32] = Mem3047[a7_1291 + 64:word32] + (d2_3018 >> 31) + (d2_3039 <u 0x00000000)
	word32 v388_3056 = Mem3052[a7_1291 - 4:word32]
	word32 a0_3063 = a2_108 + 24
	word32 v387_3053 = Mem3052[a7_1291 - 8:word32]
	Mem3066[a0_3063:word32] = Mem3052[a0_3063:word32] | 1
	word32 a0_3067 = a2_108 + 20
	word32 v390_3068 = Mem3066[a0_3067:word32] - 0x00000001
	Mem3069[a0_3067:word32] = v390_3068
	d2_1337 = v388_3056
	branch v390_3068 < 0x00000000 l000038D8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000038D8:
	Mem3074[a7_1291 - 4:word32] = a2_108
	d0_3083 = fn00003CE0(v388_3056, a3, Mem3074[a7_1291 - 4:word32], out d1_4065, out a1, out a5)
	d1 = d0_3083
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000038C0:
	a1 = a2_108 + 4
	word32 a0_3094 = Mem3069[a1:word32]
	Mem3097[a7_1291 - 4:word32] = a2_108
	Mem3101[a1:word32] = a0_3094 + 1
	byte v394_3105 = Mem3101[a0_3094:byte]
	a2_108 = Mem3101[a7_1291 - 4:word32]
	d0_3083 = DPB(1, v394_3105, 0)
	d1 = (int32) v394_3105
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000038E4:
	Mem3118[a7_1291 + 52:word32] = Mem3116[a7_1291 + 52:word32] + 0x00000001
	word32 d0_3128 = (int32) Mem3118[0x000028C5 + (DPB(d0_3083, (byte) d1, 0) & 0x000000FF):byte]
	d5_1009 = d1
	d3_2383 = v387_3053 + 0x00000001
	d0 = d0_3128 & 0x00000044
	branch (d0_3128 & 0x00000044) == 0x00000000 l00003942
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003908:
	branch d7 != 0x0000000A l0000392C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003910:
	word32 d0_3148 = (int32) Mem3118[0x000028C5 + (DPB(d0_3128 & 0x00000044, (byte) d1, 0) & 0x000000FF):byte]
	d0 = d0_3148 & 0x00000004
	branch (d0_3148 & 0x00000004) == 0x00000000 l00003942
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000392C:
	branch d7 != 0x00000008 l0000393C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003934:
	branch d1 > 0x00000037 l00003942
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000393C:
	branch a4_2831 - (v387_3053 + 0x00000001) >=u 0x00000000 l00003780
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003942:
	byte v396_3180 = Mem3177[a7_1291 + 74:byte]
	d7 = DPB(d7, v396_3180, 0)
	word32 d4_3184 = Mem3177[a7_1291 + 52:word32]
	d2_1337 = Mem3177[a7_1291 + 132:word32]
	branch Mem3177[a7_1291 + 110:word32] == 0x00000000 l00003976
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003954:
	branch d3_2383 != 0x00000002 l00003976
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000395C:
	branch d5_1009 == 0xFFFFFFFF l0000396E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003964:
	word32 a7_3200 = a7_1291 - 4
	Mem3213[a7_3200:word32] = a2_108
	Mem3216[a7_3200 - 4:word32] = d5_1009
	d0 = fn00002C0C(Mem3216[a7_3200 - 1:byte], Mem3216[a7_3200:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000396E:
	d3_2383 = d3_2383 - 0x00000001
	d4_3184 = d4_3184 - 0x00000001
	d5_1009 = Mem3232[a7_1291 + 110:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003976:
	branch d5_1009 == 0xFFFFFFFF l00003988
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000397E:
	word32 a7_3240 = a7_1291 - 4
	Mem3244[a7_3240:word32] = a2_108
	Mem3247[a7_3240 - 4:word32] = d5_1009
	d0 = fn00002C0C(Mem3247[a7_3240 - 1:byte], Mem3247[a7_3240:word32])
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003988:
	d3_128 = d3_2383 - 0x00000001
	d4_1289 = d4_3184 - 0x00000001
	branch Mem3265[a7_1291 + 73:byte] != 0x00 l00003B36
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003994:
	branch d3_128 == 0x00000000 l00003B36
// DataOut:
// DataOut (flags):
// SymbolicIn:

l0000399A:
	branch v396_3180 != 0x75 l00003A5C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003A5C:
	branch Mem3265[a7_1291 + 110:word32] != 0x0000002D l00003A78
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003A78:
	Mem3285[a7_1291 + 56:word32] = Mem3265[a7_1291 + 48:word32]
	Mem3287[a7_1291 + 52:word32] = Mem3285[a7_1291 + 44:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003A66:
	word32 v441_3289 = a7_1291 + 44
	d1 = -Mem3265[v441_3289 + 4:word32]
	d0 = -Mem3265[v441_3289:word32] - (d1 <u 0x00000000)
	a7_1291 = Mem3265[a7_1291 + 0x00000038:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003A84:
	word32 a7_3305 = a7_1291 - 4
	Mem3316[a7_3305:word32] = d0
	Mem3323[a7_3305 + 48:byte] = Mem3316[a7_3305 + 76:byte] - 0x01
	a7_1291 = a7_3305 + 4
	branch Mem3323[a7_3305 + 48:byte] == 0x00 l00003AAE
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003AAE:
	word32 d0_3337 = d2_1337 + 0x00000003 >>u 0x00000002
	d2_1337 = (d0_3337 << 0x00000002) + 0x00000004
	word32 a0_3343 = Mem3323[d2_1337 + -4:word32]
	Mem3345[a0_3343 + 4:word32] = Mem3323[a7_3305 + 60:word32]
	Mem3347[a0_3343:word32] = Mem3345[a7_3305 + 56:word32]
	d0 = d0_3337 << 0x00000002
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003A98:
	byte v451_3349 = Mem3323[a7_3305 + 48:byte] - 0x01
	Mem3350[a7_3305 + 48:byte] = v451_3349
	branch v451_3349 == 0x00 l00003B00
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003B00:
	d2_1337 = (d2_1337 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d0 = Mem3350[a7_3305 + 60:word32]
	Mem3364[Mem3350[d2_1337 + -4:word32]:byte] = (byte) d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003A9E:
	byte v452_3366 = Mem3350[a7_3305 + 48:byte] - 0x66
	Mem3367[a7_3305 + 48:byte] = v452_3366
	branch v452_3366 == 0x00 l00003AE6
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003AE6:
	d2_1337 = (d2_1337 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d0 = Mem3367[a7_3305 + 60:word32]
	Mem3381[Mem3367[d2_1337 + -4:word32]:word16] = (word16) d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003AA6:
	byte v453_3383 = Mem3367[a7_3305 + 48:byte] - 0x04
	Mem3384[a7_3305 + 48:byte] = v453_3383
	branch v453_3383 == 0x00 l00003ACC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003ACC:
	d2_1337 = (d2_1337 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d0 = Mem3384[a7_3305 + 60:word32]
	Mem3398[Mem3384[d2_1337 + -4:word32]:word32] = d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003AAC:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003B1A:
	d2_1337 = (d2_1337 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d0 = Mem3384[a7_3305 + 60:word32]
	Mem3411[Mem3384[d2_1337 + -4:word32]:word32] = d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000039A2:
	word32 a7_3413 = a7_1291 - 4
	Mem3415[a7_3413:word32] = d0
	Mem3422[a7_3413 + 56:byte] = Mem3415[a7_3413 + 76:byte] - 0x01
	a7_1291 = a7_3413 + 4
	branch Mem3422[a7_3413 + 56:byte] == 0x00 l000039CC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000039CC:
	word32 d0_3432 = d2_1337 + 0x00000003 >>u 0x00000002
	d2_1337 = (d0_3432 << 0x00000002) + 0x00000004
	word32 a0_3438 = Mem3422[d2_1337 + -4:word32]
	Mem3440[a0_3438 + 4:word32] = Mem3422[a7_3413 + 52:word32]
	Mem3442[a0_3438:word32] = Mem3440[a7_3413 + 48:word32]
	d0 = d0_3432 << 0x00000002
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000039B6:
	byte v430_3444 = Mem3422[a7_3413 + 56:byte] - 0x01
	Mem3445[a7_3413 + 56:byte] = v430_3444
	branch v430_3444 == 0x00 l00003A24
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003A24:
	d2_1337 = (d2_1337 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d0 = Mem3445[a7_3413 + 52:word32]
	Mem3459[Mem3445[d2_1337 + -4:word32]:byte] = (byte) d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000039BC:
	byte v431_3461 = Mem3445[a7_3413 + 56:byte] - 0x66
	Mem3462[a7_3413 + 56:byte] = v431_3461
	branch v431_3461 == 0x00 l00003A08
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003A08:
	d2_1337 = (d2_1337 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d0 = Mem3462[a7_3413 + 52:word32]
	Mem3476[Mem3462[d2_1337 + -4:word32]:word16] = (word16) d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000039C4:
	byte v432_3478 = Mem3462[a7_3413 + 56:byte] - 0x04
	Mem3479[a7_3413 + 56:byte] = v432_3478
	branch v432_3478 == 0x00 l000039EC
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000039EC:
	d2_1337 = (d2_1337 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d0 = Mem3479[a7_3413 + 52:word32]
	Mem3493[Mem3479[d2_1337 + -4:word32]:word32] = d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l000039CA:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003A40:
	d2_1337 = (d2_1337 + 0x00000003 >>u 0x00000002 << 0x00000002) + 0x00000004
	d0 = Mem3479[a7_3413 + 52:word32]
	Mem3506[Mem3479[d2_1337 + -4:word32]:word32] = d0
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003B32:
	Mem3511[a7_1291 + 60:word32] = Mem3509[a7_1291 + 60:word32] + 0x00000001
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003B36:
	a4_269 = a3
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003C34:
	branch d3_128 == 0x00000000 l00003C3E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003C38:
	branch Mem3563[a4_269:byte] != 0x00 l00002C5E
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003C3E:
	word32 d0_3604
	branch d5_1009 != 0xFFFFFFFF l00003C50
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003C46:
	branch Mem3597[a7_1291 + 60:word32] != 0x00000000 l00003C50
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003C50:
	d0_3604 = Mem3597[a7_1291 + 60:word32]
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003C4C:
	d0_3604 = d5_1009
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003C54:
	word32 a7_3611 = a7_1291 + 4
	word32 a3_3624 = Mem3597[a7_3611 + 24:word32]
	word32 a5_3628 = Mem3597[a7_3611 + 32:word32]
	d1Out = d1
	a1Out = a1
	a3Out = a3_3624
	a5Out = a5_3628
	return d0_3604
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00002C3C_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00003C60(word32 d4, word32 dwArg04, word32 dwArg08, word32 dwArg0C, word32 dwArg10, ptr32 & d1Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  d4:[16..31] Stack +0004:[0..31] Stack +0008:[0..31] Stack +000C:[0..31] Stack +0010:[0..31]
// LiveOut: d0 d1
// Trashed: CVZNX d0 d1
// Preserved: a7 d2 d3 d4 d5 d6
fn00003C60_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003C60:
	word32 d0_23 = __swap(dwArg08)
	word32 d1_25 = __swap(dwArg10)
	word32 d4_28 = DPB(d4, (word16) dwArg08, 0) *u (word16) dwArg10
	word32 d1_31 = d1_25 *u (word16) d0_23
	word32 d2_37 = dwArg08 *u (word16) d1_25 + __swap(DPB(d4_28, (word16) d4_28 ^ (word16) d4_28, 0)) + dwArg10 *u (word16) d0_23
	branch d2_37 >=u 0x00000000 l00003C94
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003C8E:
	d1_31 = d1_31 + 0x00010000
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003C94:
	word32 d2_43 = __swap(d2_37)
	word32 d3_61 = __swap(dwArg0C) *u (word16) dwArg08
	word32 d3_66 = __swap(DPB(d3_61, (word16) (d3_61 + __swap(dwArg08) *u (word16) dwArg0C), 0))
	word32 d3_77 = __swap(dwArg04) *u (word16) dwArg10
	word32 d3_82 = __swap(DPB(d3_77, (word16) (d3_77 + __swap(dwArg10) *u (word16) dwArg04), 0))
	d1Out = DPB(d2_43, (word16) d4_28, 0)
	return (int32) (word16) d2_43 + d1_31 + (dwArg0C *u (word16) dwArg08 + DPB(d3_66, (word16) d3_66 ^ (word16) d3_66, 0)) + (dwArg04 *u (word16) dwArg10 + DPB(d3_82, (word16) d3_82 ^ (word16) d3_82, 0))
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00003C60_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00003CE0(word32 d2, word32 a3, word32 dwArg04, ptr32 & d1Out, ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a3:[0..31] d2:[0..31] Stack +0004:[0..31]
// LiveOut: a1 a5 d0 d1
// Trashed: CVZNX a0 a1 a5 d0 d1
// Preserved: a2 a3 a4 a6 a7 d2 d3 d4 d5
fn00003CE0_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003CE0:
	word32 d0_160
	word32 a5_278
	word32 a1_116
	word32 d1_118 = fn00002530(d2, dwArg04, a3, out a1_116, out a5_278)
	branch dwArg04 != 0x00000000 l00003CF8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003CF8:
	branch (Mem26[dwArg04 + 24:word32] & 42) == 32 l00003D0A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D0A:
	Mem49[dwArg04 + 24:word32] = Mem26[dwArg04 + 24:word32] | 1
	word32 d0_125 = Mem49[dwArg04 + 24:word32] & 0x00000200
	branch d0_125 == 0x00000000 l00003D22
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D1C:
	d0_125 = fn00003DDC(d2, a3, out a1_116, out a5_278)
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D22:
	branch Mem49[dwArg04 + 28:word32] != 0x00000000 l00003D40
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D28:
	d0_125 = Mem49[dwArg04 + 24:word32] & 4
	branch d0_125 == 0x00000000 l00003D38
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D38:
	Mem79[dwArg04 + 28:word32] = 0x00000400
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D30:
	Mem83[dwArg04 + 28:word32] = 1
	d0_125 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D40:
	branch Mem86[dwArg04 + 8:word32] != 0x00000000 l00003D7C
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D46:
	word32 d4_100
	branch (Mem86[dwArg04 + 24:word32] & 0x00000080) == 0x00000000 l00003D5A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D5A:
	d4_100 = 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D56:
	d4_100 = 2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D5C:
	word32 d0_117 = fn0000215C(d4_100 + Mem86[dwArg04 + 28:word32], out d1_118, out a0_317, out a1_116)
	d0_125 = d0_117
	branch d0_117 != 0x00000000 l00003D74
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D74:
	Mem131[dwArg04 + 8:word32] = d0_117 + 1
	a1_116 = d0_117 + 1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D7C:
	Mem137[dwArg04 + 4:word32] = Mem135[dwArg04 + 8:word32]
	d1_118 = Mem137[dwArg04:word32]
	execPrivate2()
	Mem147[dwArg04 + 20:word32] = d0_125
	word32 v26_148 = Mem147[dwArg04 + 20:word32] - 0x00000001
	Mem149[dwArg04 + 20:word32] = v26_148
	branch v26_148 >= 0x00000000 l00003DC2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003DC2:
	word32 a0_153 = Mem149[dwArg04 + 4:word32]
	Mem157[dwArg04 + 4:word32] = a0_153 + 1
	a1_116 = dwArg04 + 4
	d0_160 = DPB(d0_125, Mem157[a0_153:byte], 0) & 0x000000FF
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003DA0:
	branch Mem149[dwArg04 + 20:word32] != -1 l00003DB2
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003DB2:
	Mem171[dwArg04 + 24:word32] = Mem149[dwArg04 + 24:word32] | 16
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003DA8:
	Mem178[dwArg04 + 24:word32] = Mem149[dwArg04 + 24:word32] | 8
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003DBA:
	Mem183[dwArg04 + 20:word32] = 0x00000000
	d0_160 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D70:
	d0_160 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003D04:
	d0_160 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003CF2:
	d0_160 = -1
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003DD6:
	d1Out = d1_118
	a1Out = a1_116
	a5Out = a5_278
	return d0_160
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00003CE0_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



word32 fn00003DDC(word32 d2, word32 a3, ptr32 & a1Out, ptr32 & a5Out)
// stackDelta: 0; fpuStackDelta: 0; fpuMaxParam: -1

// MayUse:  a3:[0..31] d2:[0..31]
// LiveOut: a1 a5 d0
// Trashed: CVZN a0 a1 a4 a5 d0 d1
// Preserved: X a2 a7
fn00003DDC_entry:
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003DDC:
	word32 a2_11 = Mem5[0x00003F88:word32]
	word32 d0_44 = a2_11
	branch a2_11 == 0x00000000 l00003E14
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003DEA:
	branch (Mem12[a2_11 + 24:word32] & 0x00000202) != 0x00000202 l00003E0A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003DFC:
	branch Mem12[a2_11:word32] == 0x00000000 l00003E0A
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003E00:
	fn000020B0(d2, a3, a2_11, out a0_97, out a1, out a5)
	Mem42 = Mem24
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003E0A:
	a2_11 = Mem42[a2_11 + 12:word32]
	d0_44 = a2_11
	branch a2_11 != 0x00000000 l00003DEA
// DataOut:
// DataOut (flags):
// SymbolicIn:

l00003E14:
	a1Out = a1
	a5Out = a5
	return d0_44
// DataOut:
// DataOut (flags):
// SymbolicIn:

fn00003DDC_exit:
// DataOut:
// DataOut (flags):
// SymbolicIn:



